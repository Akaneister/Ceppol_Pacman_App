{"ast":null,"code":"var _jsxFileName = \"D:\\\\Stage\\\\MarineV3\\\\frontend\\\\src\\\\components\\\\pages\\\\carte.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport '../css/carte.css';\n\n// Fix Leaflet marker icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst Carte = () => {\n  _s();\n  const [lieux, setLieux] = useState([]); // Liste des lieux à afficher\n  const [rapportTitres, setRapportTitres] = useState({}); // Titres des rapports indexés par id_rapport\n  const mapRef = useRef(null); // Référence pour la carte\n  const mapContainerRef = useRef(null); // Référence pour le container de la carte\n  const [pointActuel, setPointActuel] = useState(null);\n  const markerRefs = useRef([]); // Ajoutez ceci en haut du composant Carte\n\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\n\n  // Fonction pour récupérer les lieux depuis l'API\n  const fetchLieux = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\n      setLieux(response.data);\n      console.log('Lieux récupérés:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des lieux:', error);\n    }\n  };\n\n  // Fonction pour récupérer les titres des rapports\n  const fetchRapportTitres = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\n      const titres = {};\n      response.data.forEach(rapport => {\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\n      });\n      setRapportTitres(titres);\n      console.log('Titres des rapports récupérés:', titres);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\n    }\n  };\n\n  // Initialiser la carte et charger les données\n  useEffect(() => {\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\n    if (!mapRef.current && mapContainerRef.current) {\n      mapRef.current = L.map(mapContainerRef.current).setView([43.3, 5.4], 10); // Centrer la carte\n\n      // Carte marine principale - représente les éléments indispensables à la navigation maritime\n      // En adéquation avec la signalisation maritime, elle permet de se situer et de se diriger\n      const carteMarineBase = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Base/MapServer/tile/{z}/{y}/{x}', {\n        attribution: '&copy; <a href=\"https://www.esri.com/\">Esri</a> - Carte Marine de Navigation',\n        maxZoom: 16\n      });\n\n      // Couche de signalisation maritime (balises, phares, bouées, amers)\n      const signalisationMaritime = L.tileLayer('https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png', {\n        attribution: 'Signalisation Maritime &copy; <a href=\"http://www.openseamap.org\">OpenSeaMap</a>',\n        maxZoom: 18,\n        opacity: 0.8\n      });\n\n      // Couche bathymétrique (profondeurs et sondes)\n      const bathymetrie = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Reference/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Bathymétrie &copy; <a href=\"https://www.esri.com/\">Esri</a>',\n        maxZoom: 16,\n        opacity: 0.7\n      });\n\n      // Ajouter les couches essentielles à la navigation\n      carteMarineBase.addTo(mapRef.current);\n      signalisationMaritime.addTo(mapRef.current);\n      bathymetrie.addTo(mapRef.current);\n\n      // Contrôles de navigation maritime\n      const couchesNavigation = {\n        \"Carte Marine Base\": carteMarineBase,\n        \"Carte Océanique\": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Base/MapServer/tile/{z}/{y}/{x}', {\n          attribution: '&copy; <a href=\"https://www.esri.com/\">Esri</a>',\n          maxZoom: 16\n        })\n      };\n      const elementsNavigation = {\n        \"Signalisation Maritime\": signalisationMaritime,\n        \"Bathymétrie & Sondes\": bathymetrie,\n        \"Amers & Repères\": L.tileLayer('https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png', {\n          attribution: '&copy; OpenSeaMap',\n          maxZoom: 18\n        })\n      };\n      L.control.layers(couchesNavigation, elementsNavigation, {\n        position: 'topright',\n        collapsed: false\n      }).addTo(mapRef.current);\n\n      // Ajouter une échelle nautique\n      L.control.scale({\n        metric: true,\n        imperial: false,\n        position: 'bottomleft'\n      }).addTo(mapRef.current);\n    }\n\n    // Effectuer la récupération des données au montage du composant\n    fetchLieux();\n    fetchRapportTitres();\n    return () => {\n      // Cleanup de la carte lorsque le composant est démonté\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, [API_BASE_URL]);\n\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\n  useEffect(() => {\n    if (mapRef.current && lieux.length > 0) {\n      // Supprimer uniquement les anciens marqueurs\n      markerRefs.current.forEach(marker => {\n        mapRef.current.removeLayer(marker);\n      });\n      markerRefs.current = [];\n\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\n      const coordsMap = {};\n      lieux.forEach(lieu => {\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\n        if (!coordsMap[coordKey]) {\n          coordsMap[coordKey] = [];\n        }\n        coordsMap[coordKey].push(lieu);\n      });\n\n      // Ajouter un marqueur pour chaque coordonnée unique\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\n        const [lat, lng] = coords.split(',');\n\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\n          console.warn('Coordonnées invalides:', coords);\n          return;\n        }\n\n        // Utiliser une icône de navigation maritime conforme à la signalisation\n        const iconeNavigation = L.divIcon({\n          className: 'marqueur-navigation-maritime',\n          html: `<div style=\"\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\n            border: 3px solid #1565c0;\n            border-radius: 50%;\n            width: 26px;\n            height: 26px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\n            font-size: 14px;\n            font-weight: bold;\n            color: #1565c0;\n          \">⚓</div>`,\n          iconSize: [30, 30],\n          iconAnchor: [15, 15]\n        });\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], {\n          icon: iconeNavigation\n        }).addTo(mapRef.current);\n\n        // Créer le contenu du popup avec informations de navigation maritime\n        let popupContent = `\n          <div>\n            <strong>POSITION DE NAVIGATION</strong>\n            <div>\n              <strong>Coordonnées :</strong>\n              <ul>\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\n              </ul>\n            </div>\n            <div>\n              <strong>Points d'intérêt maritime :</strong>\n              <ul>\n                ${lieuxAtCoord.map(lieu => `\n                  <li>\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\n                    ID: ${lieu.id_lieu}<br/>\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\n                      Visualiser le rapport\n                    </button>\n                  </li>\n                `).join('')}\n              </ul>\n            </div>\n          </div>\n        `;\n        marker.bindPopup(popupContent);\n\n        // Ouvrir le popup si c'est le point actuel\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\n          marker.openPopup();\n        }\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\n      });\n    }\n  }, [lieux, rapportTitres, pointActuel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-carte\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"carte-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDDED Carte Marine de Navigation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Carte marine repr\\xE9sentant les \\xE9l\\xE9ments indispensables \\xE0 la navigation maritime.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 90\n        }, this), \"En ad\\xE9quation avec la signalisation maritime, elle permet de se situer et de se diriger.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(Carte, \"VZLuN9kk9j84zZmd/cVimztAWvI=\");\n_c = Carte;\nexport default Carte;\nvar _c;\n$RefreshReg$(_c, \"Carte\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","Carte","_s","lieux","setLieux","rapportTitres","setRapportTitres","mapRef","mapContainerRef","pointActuel","setPointActuel","markerRefs","API_BASE_URL","process","env","REACT_APP_API_URL","fetchLieux","response","get","data","console","log","error","fetchRapportTitres","titres","forEach","rapport","id_rapport","titre","current","map","setView","carteMarineBase","tileLayer","attribution","maxZoom","signalisationMaritime","opacity","bathymetrie","addTo","couchesNavigation","elementsNavigation","control","layers","position","collapsed","scale","metric","imperial","remove","length","marker","removeLayer","coordsMap","lieu","coordKey","latitude","longitude","push","Object","entries","coords","lieuxAtCoord","lat","lng","split","isNaN","parseFloat","warn","iconeNavigation","divIcon","className","html","iconSize","iconAnchor","icon","popupContent","toFixed","details_lieu","id_lieu","join","bindPopup","some","openPopup","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["D:/Stage/MarineV3/frontend/src/components/pages/carte.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport '../css/carte.css';\r\n\r\n// Fix Leaflet marker icon issue\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\nconst Carte = () => {\r\n  const [lieux, setLieux] = useState([]); // Liste des lieux à afficher\r\n  const [rapportTitres, setRapportTitres] = useState({}); // Titres des rapports indexés par id_rapport\r\n  const mapRef = useRef(null); // Référence pour la carte\r\n  const mapContainerRef = useRef(null); // Référence pour le container de la carte\r\n  const [pointActuel, setPointActuel] = useState(null);\r\n  const markerRefs = useRef([]); // Ajoutez ceci en haut du composant Carte\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\n  // Fonction pour récupérer les lieux depuis l'API\r\n  const fetchLieux = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\r\n      setLieux(response.data);\r\n      console.log('Lieux récupérés:', response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des lieux:', error);\r\n    }\r\n  };\r\n\r\n  // Fonction pour récupérer les titres des rapports\r\n  const fetchRapportTitres = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\r\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\r\n      const titres = {};\r\n      response.data.forEach(rapport => {\r\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\r\n      });\r\n      setRapportTitres(titres);\r\n      console.log('Titres des rapports récupérés:', titres);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\r\n    }\r\n  };\r\n\r\n  // Initialiser la carte et charger les données\r\n  useEffect(() => {\r\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\r\n    if (!mapRef.current && mapContainerRef.current) {\r\n      mapRef.current = L.map(mapContainerRef.current).setView([43.3, 5.4], 10); // Centrer la carte\r\n\r\n      // Carte marine principale - représente les éléments indispensables à la navigation maritime\r\n      // En adéquation avec la signalisation maritime, elle permet de se situer et de se diriger\r\n      const carteMarineBase = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Base/MapServer/tile/{z}/{y}/{x}', {\r\n        attribution: '&copy; <a href=\"https://www.esri.com/\">Esri</a> - Carte Marine de Navigation',\r\n        maxZoom: 16\r\n      });\r\n\r\n      // Couche de signalisation maritime (balises, phares, bouées, amers)\r\n      const signalisationMaritime = L.tileLayer('https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png', {\r\n        attribution: 'Signalisation Maritime &copy; <a href=\"http://www.openseamap.org\">OpenSeaMap</a>',\r\n        maxZoom: 18,\r\n        opacity: 0.8\r\n      });\r\n\r\n      // Couche bathymétrique (profondeurs et sondes)\r\n      const bathymetrie = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Reference/MapServer/tile/{z}/{y}/{x}', {\r\n        attribution: 'Bathymétrie &copy; <a href=\"https://www.esri.com/\">Esri</a>',\r\n        maxZoom: 16,\r\n        opacity: 0.7\r\n      });\r\n\r\n      // Ajouter les couches essentielles à la navigation\r\n      carteMarineBase.addTo(mapRef.current);\r\n      signalisationMaritime.addTo(mapRef.current);\r\n      bathymetrie.addTo(mapRef.current);\r\n\r\n      // Contrôles de navigation maritime\r\n      const couchesNavigation = {\r\n        \"Carte Marine Base\": carteMarineBase,\r\n        \"Carte Océanique\": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Base/MapServer/tile/{z}/{y}/{x}', {\r\n          attribution: '&copy; <a href=\"https://www.esri.com/\">Esri</a>',\r\n          maxZoom: 16\r\n        })\r\n      };\r\n\r\n      const elementsNavigation = {\r\n        \"Signalisation Maritime\": signalisationMaritime,\r\n        \"Bathymétrie & Sondes\": bathymetrie,\r\n        \"Amers & Repères\": L.tileLayer('https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png', {\r\n          attribution: '&copy; OpenSeaMap',\r\n          maxZoom: 18\r\n        })\r\n      };\r\n\r\n      L.control.layers(couchesNavigation, elementsNavigation, {\r\n        position: 'topright',\r\n        collapsed: false\r\n      }).addTo(mapRef.current);\r\n\r\n      // Ajouter une échelle nautique\r\n      L.control.scale({\r\n        metric: true,\r\n        imperial: false,\r\n        position: 'bottomleft'\r\n      }).addTo(mapRef.current);\r\n    }\r\n\r\n    // Effectuer la récupération des données au montage du composant\r\n    fetchLieux();\r\n    fetchRapportTitres();\r\n\r\n    return () => {\r\n      // Cleanup de la carte lorsque le composant est démonté\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n        mapRef.current = null;\r\n      }\r\n    };\r\n  }, [API_BASE_URL]);\r\n\r\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\r\n  useEffect(() => {\r\n    if (mapRef.current && lieux.length > 0) {\r\n      // Supprimer uniquement les anciens marqueurs\r\n      markerRefs.current.forEach(marker => {\r\n        mapRef.current.removeLayer(marker);\r\n      });\r\n      markerRefs.current = [];\r\n\r\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\r\n      const coordsMap = {};\r\n\r\n      lieux.forEach(lieu => {\r\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\r\n        if (!coordsMap[coordKey]) {\r\n          coordsMap[coordKey] = [];\r\n        }\r\n        coordsMap[coordKey].push(lieu);\r\n      });\r\n\r\n      // Ajouter un marqueur pour chaque coordonnée unique\r\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\r\n        const [lat, lng] = coords.split(',');\r\n\r\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\r\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\r\n          console.warn('Coordonnées invalides:', coords);\r\n          return;\r\n        }\r\n\r\n        // Utiliser une icône de navigation maritime conforme à la signalisation\r\n        const iconeNavigation = L.divIcon({\r\n          className: 'marqueur-navigation-maritime',\r\n          html: `<div style=\"\r\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\r\n            border: 3px solid #1565c0;\r\n            border-radius: 50%;\r\n            width: 26px;\r\n            height: 26px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            color: #1565c0;\r\n          \">⚓</div>`,\r\n          iconSize: [30, 30],\r\n          iconAnchor: [15, 15]\r\n        });\r\n\r\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], {icon: iconeNavigation}).addTo(mapRef.current);\r\n\r\n        // Créer le contenu du popup avec informations de navigation maritime\r\n        let popupContent = `\r\n          <div>\r\n            <strong>POSITION DE NAVIGATION</strong>\r\n            <div>\r\n              <strong>Coordonnées :</strong>\r\n              <ul>\r\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\r\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <strong>Points d'intérêt maritime :</strong>\r\n              <ul>\r\n                ${lieuxAtCoord.map(lieu => `\r\n                  <li>\r\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\r\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\r\n                    ID: ${lieu.id_lieu}<br/>\r\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\r\n                      Visualiser le rapport\r\n                    </button>\r\n                  </li>\r\n                `).join('')}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        marker.bindPopup(popupContent);\r\n\r\n        // Ouvrir le popup si c'est le point actuel\r\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\r\n          marker.openPopup();\r\n        }\r\n\r\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\r\n      });\r\n    }\r\n  }, [lieux, rapportTitres, pointActuel]);\r\n\r\n  return (\r\n    <div className=\"page-carte\">\r\n      <div className=\"carte-header\">\r\n        <h2>🧭 Carte Marine de Navigation</h2>\r\n        <p >\r\n          Carte marine représentant les éléments indispensables à la navigation maritime.<br/>\r\n          En adéquation avec la signalisation maritime, elle permet de se situer et de se diriger.\r\n        </p>\r\n      </div>\r\n      <div\r\n        ref={mapContainerRef}\r\n        className=\"map-container\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Carte;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}