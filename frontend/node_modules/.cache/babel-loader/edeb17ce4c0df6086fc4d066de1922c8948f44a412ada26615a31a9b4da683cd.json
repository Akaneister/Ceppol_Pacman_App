{"ast":null,"code":"// AuthContext.jsx\nimport{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[authData,setAuthData]=useState({isAuthenticated:false,motdepasse:null,selectedOperateur:null,// Nom de l'opérateur pour l'affichage\nOpid:null,// ID de l'opérateur\nuserType:null,// 'admin' ou 'operateur'\nisAdmin:false// Booléen pour vérifier si c'est un admin\n});const[loading,setLoading]=useState(true);useEffect(()=>{try{const storedAuth=localStorage.getItem('authData');if(storedAuth){const parsedAuth=JSON.parse(storedAuth);console.log(\"Données d'authentification récupérées du localStorage:\",parsedAuth);setAuthData(parsedAuth);}else{console.log(\"Aucune donnée d'authentification trouvée dans le localStorage\");}}catch(error){console.error(\"Erreur lors de la récupération des données d'authentification:\",error);// Réinitialiser le localStorage en cas d'erreur de parsing\nlocalStorage.removeItem('authData');}finally{setLoading(false);}},[]);// Fonction de connexion pour les opérateurs\nconst login=(motdepasse,operateur)=>{console.log(\"Fonction login appelée avec les paramètres:\",{motdepasse:\"***\",operateur});if(!operateur||!operateur.id_operateur){console.error(\"Paramètres d'opérateur invalides:\",operateur);return;}const auth={motdepasse,selectedOperateur:operateur.nom,// Nom pour l'affichage\nOpid:operateur.id_operateur,// ID de l'opérateur\nisAuthenticated:true,userType:operateur.type||'operateur',isAdmin:operateur.type==='admin'};console.log(\"Nouvelles données d'authentification:\",{...auth,motdepasse:\"***\"});// Mettre à jour l'état local\nsetAuthData(auth);// Mettre à jour le localStorage\ntry{localStorage.setItem('authData',JSON.stringify(auth));console.log(\"Données d'authentification sauvegardées dans le localStorage\");}catch(error){console.error(\"Erreur lors de la sauvegarde des données d'authentification:\",error);}};// Fonction de connexion pour les admins\nconst loginAdmin=motdepasse=>{console.log(\"Fonction loginAdmin appelée\");const auth={motdepasse,selectedOperateur:'Administrateur',// Nom pour l'affichage\nOpid:'admin',// ID spécial pour admin\nisAuthenticated:true,userType:'admin',isAdmin:true};console.log(\"Nouvelles données d'authentification admin:\",{...auth,motdepasse:\"***\"});// Mettre à jour l'état local\nsetAuthData(auth);// Mettre à jour le localStorage\ntry{localStorage.setItem('authData',JSON.stringify(auth));console.log(\"Données d'authentification admin sauvegardées dans le localStorage\");}catch(error){console.error(\"Erreur lors de la sauvegarde des données d'authentification admin:\",error);}};const logout=()=>{console.log(\"Déconnexion de l'utilisateur\");// Réinitialiser l'état\nsetAuthData({isAuthenticated:false,motdepasse:null,selectedOperateur:null,Opid:null,userType:null,isAdmin:false});// Supprimer du localStorage\ntry{localStorage.removeItem('authData');console.log(\"Données d'authentification supprimées du localStorage\");}catch(error){console.error(\"Erreur lors de la suppression des données d'authentification:\",error);}};// Valeurs exposées par le contexte\nconst contextValue={authData,login,loginAdmin,logout,loading,// Ajouter des getters pratiques\nisAuthenticated:authData.isAuthenticated,operateurNom:authData.selectedOperateur,operateurId:authData.Opid,userType:authData.userType,isAdmin:authData.isAdmin};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:contextValue,children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","authData","setAuthData","isAuthenticated","motdepasse","selectedOperateur","Opid","userType","isAdmin","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","console","log","error","removeItem","login","operateur","id_operateur","auth","nom","type","setItem","stringify","loginAdmin","logout","contextValue","operateurNom","operateurId","Provider","value","useAuth"],"sources":["D:/Stage/MarineV3/frontend/src/components/context/AuthContext.js"],"sourcesContent":["// AuthContext.jsx\r\nimport { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authData, setAuthData] = useState({\r\n    isAuthenticated: false,\r\n    motdepasse: null,\r\n    selectedOperateur: null, // Nom de l'opérateur pour l'affichage\r\n    Opid: null,              // ID de l'opérateur\r\n    userType: null,          // 'admin' ou 'operateur'\r\n    isAdmin: false,          // Booléen pour vérifier si c'est un admin\r\n  });\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const storedAuth = localStorage.getItem('authData');\r\n      if (storedAuth) {\r\n        const parsedAuth = JSON.parse(storedAuth);\r\n        console.log(\"Données d'authentification récupérées du localStorage:\", parsedAuth);\r\n        setAuthData(parsedAuth);\r\n      } else {\r\n        console.log(\"Aucune donnée d'authentification trouvée dans le localStorage\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des données d'authentification:\", error);\r\n      // Réinitialiser le localStorage en cas d'erreur de parsing\r\n      localStorage.removeItem('authData');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Fonction de connexion pour les opérateurs\r\n  const login = (motdepasse, operateur) => {\r\n    console.log(\"Fonction login appelée avec les paramètres:\", { motdepasse: \"***\", operateur });\r\n    \r\n    if (!operateur || !operateur.id_operateur) {\r\n      console.error(\"Paramètres d'opérateur invalides:\", operateur);\r\n      return;\r\n    }\r\n    \r\n    const auth = {\r\n      motdepasse,\r\n      selectedOperateur: operateur.nom,  // Nom pour l'affichage\r\n      Opid: operateur.id_operateur,      // ID de l'opérateur\r\n      isAuthenticated: true,\r\n      userType: operateur.type || 'operateur',\r\n      isAdmin: operateur.type === 'admin',\r\n    };\r\n  \r\n    console.log(\"Nouvelles données d'authentification:\", { ...auth, motdepasse: \"***\" });\r\n    \r\n    // Mettre à jour l'état local\r\n    setAuthData(auth);\r\n    \r\n    // Mettre à jour le localStorage\r\n    try {\r\n      localStorage.setItem('authData', JSON.stringify(auth));\r\n      console.log(\"Données d'authentification sauvegardées dans le localStorage\");\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la sauvegarde des données d'authentification:\", error);\r\n    }\r\n  };\r\n\r\n  // Fonction de connexion pour les admins\r\n  const loginAdmin = (motdepasse) => {\r\n    console.log(\"Fonction loginAdmin appelée\");\r\n    \r\n    const auth = {\r\n      motdepasse,\r\n      selectedOperateur: 'Administrateur',  // Nom pour l'affichage\r\n      Opid: 'admin',                        // ID spécial pour admin\r\n      isAuthenticated: true,\r\n      userType: 'admin',\r\n      isAdmin: true,\r\n    };\r\n  \r\n    console.log(\"Nouvelles données d'authentification admin:\", { ...auth, motdepasse: \"***\" });\r\n    \r\n    // Mettre à jour l'état local\r\n    setAuthData(auth);\r\n    \r\n    // Mettre à jour le localStorage\r\n    try {\r\n      localStorage.setItem('authData', JSON.stringify(auth));\r\n      console.log(\"Données d'authentification admin sauvegardées dans le localStorage\");\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la sauvegarde des données d'authentification admin:\", error);\r\n    }\r\n  };\r\n  \r\n  const logout = () => {\r\n    console.log(\"Déconnexion de l'utilisateur\");\r\n    \r\n    // Réinitialiser l'état\r\n    setAuthData({\r\n      isAuthenticated: false,\r\n      motdepasse: null,\r\n      selectedOperateur: null,\r\n      Opid: null,\r\n      userType: null,\r\n      isAdmin: false,\r\n    });\r\n    \r\n    // Supprimer du localStorage\r\n    try {\r\n      localStorage.removeItem('authData');\r\n      console.log(\"Données d'authentification supprimées du localStorage\");\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression des données d'authentification:\", error);\r\n    }\r\n  };\r\n\r\n  // Valeurs exposées par le contexte\r\n  const contextValue = {\r\n    authData,\r\n    login,\r\n    loginAdmin,\r\n    logout,\r\n    loading,\r\n    // Ajouter des getters pratiques\r\n    isAuthenticated: authData.isAuthenticated,\r\n    operateurNom: authData.selectedOperateur,\r\n    operateurId: authData.Opid,\r\n    userType: authData.userType,\r\n    isAdmin: authData.isAdmin\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}