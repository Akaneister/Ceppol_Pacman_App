{"ast":null,"code":"var _jsxFileName = \"D:\\\\Stage\\\\MarineV3\\\\frontend\\\\src\\\\components\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.jsx\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authData, setAuthData] = useState({\n    isAuthenticated: false,\n    motdepasse: null,\n    selectedOperateur: null,\n    // Nom de l'opérateur pour l'affichage\n    Opid: null,\n    // ID de l'opérateur\n    userType: null,\n    // 'admin' ou 'operateur'\n    isAdmin: false // Booléen pour vérifier si c'est un admin\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    try {\n      const storedAuth = localStorage.getItem('authData');\n      if (storedAuth) {\n        const parsedAuth = JSON.parse(storedAuth);\n        console.log(\"Données d'authentification récupérées du localStorage:\", parsedAuth);\n        setAuthData(parsedAuth);\n      } else {\n        console.log(\"Aucune donnée d'authentification trouvée dans le localStorage\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des données d'authentification:\", error);\n      // Réinitialiser le localStorage en cas d'erreur de parsing\n      localStorage.removeItem('authData');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fonction de connexion pour les opérateurs\n  const login = (motdepasse, operateur) => {\n    console.log(\"Fonction login appelée avec les paramètres:\", {\n      motdepasse: \"***\",\n      operateur\n    });\n    if (!operateur || !operateur.id_operateur) {\n      console.error(\"Paramètres d'opérateur invalides:\", operateur);\n      return;\n    }\n    const auth = {\n      motdepasse,\n      selectedOperateur: operateur.nom,\n      // Nom pour l'affichage\n      Opid: operateur.id_operateur,\n      // ID de l'opérateur\n      isAuthenticated: true,\n      userType: operateur.type || 'operateur',\n      isAdmin: operateur.type === 'admin'\n    };\n    console.log(\"Nouvelles données d'authentification:\", {\n      ...auth,\n      motdepasse: \"***\"\n    });\n\n    // Mettre à jour l'état local\n    setAuthData(auth);\n\n    // Mettre à jour le localStorage\n    try {\n      localStorage.setItem('authData', JSON.stringify(auth));\n      console.log(\"Données d'authentification sauvegardées dans le localStorage\");\n    } catch (error) {\n      console.error(\"Erreur lors de la sauvegarde des données d'authentification:\", error);\n    }\n  };\n\n  // Fonction de connexion pour les admins\n  const loginAdmin = motdepasse => {\n    console.log(\"Fonction loginAdmin appelée\");\n    const auth = {\n      motdepasse,\n      selectedOperateur: 'Administrateur',\n      // Nom pour l'affichage\n      Opid: 'admin',\n      // ID spécial pour admin\n      isAuthenticated: true,\n      userType: 'admin',\n      isAdmin: true\n    };\n    console.log(\"Nouvelles données d'authentification admin:\", {\n      ...auth,\n      motdepasse: \"***\"\n    });\n\n    // Mettre à jour l'état local\n    setAuthData(auth);\n\n    // Mettre à jour le localStorage\n    try {\n      localStorage.setItem('authData', JSON.stringify(auth));\n      console.log(\"Données d'authentification admin sauvegardées dans le localStorage\");\n    } catch (error) {\n      console.error(\"Erreur lors de la sauvegarde des données d'authentification admin:\", error);\n    }\n  };\n  const logout = () => {\n    console.log(\"Déconnexion de l'utilisateur\");\n\n    // Réinitialiser l'état\n    setAuthData({\n      isAuthenticated: false,\n      motdepasse: null,\n      selectedOperateur: null,\n      Opid: null,\n      userType: null,\n      isAdmin: false\n    });\n\n    // Supprimer du localStorage\n    try {\n      localStorage.removeItem('authData');\n      console.log(\"Données d'authentification supprimées du localStorage\");\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression des données d'authentification:\", error);\n    }\n  };\n\n  // Valeurs exposées par le contexte\n  const contextValue = {\n    authData,\n    login,\n    loginAdmin,\n    logout,\n    loading,\n    // Ajouter des getters pratiques\n    isAuthenticated: authData.isAuthenticated,\n    operateurNom: authData.selectedOperateur,\n    operateurId: authData.Opid,\n    userType: authData.userType,\n    isAdmin: authData.isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"X4pPgr+HSvHVLdsWts926oxH52o=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authData","setAuthData","isAuthenticated","motdepasse","selectedOperateur","Opid","userType","isAdmin","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","console","log","error","removeItem","login","operateur","id_operateur","auth","nom","type","setItem","stringify","loginAdmin","logout","contextValue","operateurNom","operateurId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/Stage/MarineV3/frontend/src/components/context/AuthContext.js"],"sourcesContent":["// AuthContext.jsx\r\nimport { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authData, setAuthData] = useState({\r\n    isAuthenticated: false,\r\n    motdepasse: null,\r\n    selectedOperateur: null, // Nom de l'opérateur pour l'affichage\r\n    Opid: null,              // ID de l'opérateur\r\n    userType: null,          // 'admin' ou 'operateur'\r\n    isAdmin: false,          // Booléen pour vérifier si c'est un admin\r\n  });\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const storedAuth = localStorage.getItem('authData');\r\n      if (storedAuth) {\r\n        const parsedAuth = JSON.parse(storedAuth);\r\n        console.log(\"Données d'authentification récupérées du localStorage:\", parsedAuth);\r\n        setAuthData(parsedAuth);\r\n      } else {\r\n        console.log(\"Aucune donnée d'authentification trouvée dans le localStorage\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des données d'authentification:\", error);\r\n      // Réinitialiser le localStorage en cas d'erreur de parsing\r\n      localStorage.removeItem('authData');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Fonction de connexion pour les opérateurs\r\n  const login = (motdepasse, operateur) => {\r\n    console.log(\"Fonction login appelée avec les paramètres:\", { motdepasse: \"***\", operateur });\r\n    \r\n    if (!operateur || !operateur.id_operateur) {\r\n      console.error(\"Paramètres d'opérateur invalides:\", operateur);\r\n      return;\r\n    }\r\n    \r\n    const auth = {\r\n      motdepasse,\r\n      selectedOperateur: operateur.nom,  // Nom pour l'affichage\r\n      Opid: operateur.id_operateur,      // ID de l'opérateur\r\n      isAuthenticated: true,\r\n      userType: operateur.type || 'operateur',\r\n      isAdmin: operateur.type === 'admin',\r\n    };\r\n  \r\n    console.log(\"Nouvelles données d'authentification:\", { ...auth, motdepasse: \"***\" });\r\n    \r\n    // Mettre à jour l'état local\r\n    setAuthData(auth);\r\n    \r\n    // Mettre à jour le localStorage\r\n    try {\r\n      localStorage.setItem('authData', JSON.stringify(auth));\r\n      console.log(\"Données d'authentification sauvegardées dans le localStorage\");\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la sauvegarde des données d'authentification:\", error);\r\n    }\r\n  };\r\n\r\n  // Fonction de connexion pour les admins\r\n  const loginAdmin = (motdepasse) => {\r\n    console.log(\"Fonction loginAdmin appelée\");\r\n    \r\n    const auth = {\r\n      motdepasse,\r\n      selectedOperateur: 'Administrateur',  // Nom pour l'affichage\r\n      Opid: 'admin',                        // ID spécial pour admin\r\n      isAuthenticated: true,\r\n      userType: 'admin',\r\n      isAdmin: true,\r\n    };\r\n  \r\n    console.log(\"Nouvelles données d'authentification admin:\", { ...auth, motdepasse: \"***\" });\r\n    \r\n    // Mettre à jour l'état local\r\n    setAuthData(auth);\r\n    \r\n    // Mettre à jour le localStorage\r\n    try {\r\n      localStorage.setItem('authData', JSON.stringify(auth));\r\n      console.log(\"Données d'authentification admin sauvegardées dans le localStorage\");\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la sauvegarde des données d'authentification admin:\", error);\r\n    }\r\n  };\r\n  \r\n  const logout = () => {\r\n    console.log(\"Déconnexion de l'utilisateur\");\r\n    \r\n    // Réinitialiser l'état\r\n    setAuthData({\r\n      isAuthenticated: false,\r\n      motdepasse: null,\r\n      selectedOperateur: null,\r\n      Opid: null,\r\n      userType: null,\r\n      isAdmin: false,\r\n    });\r\n    \r\n    // Supprimer du localStorage\r\n    try {\r\n      localStorage.removeItem('authData');\r\n      console.log(\"Données d'authentification supprimées du localStorage\");\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression des données d'authentification:\", error);\r\n    }\r\n  };\r\n\r\n  // Valeurs exposées par le contexte\r\n  const contextValue = {\r\n    authData,\r\n    login,\r\n    loginAdmin,\r\n    logout,\r\n    loading,\r\n    // Ajouter des getters pratiques\r\n    isAuthenticated: authData.isAuthenticated,\r\n    operateurNom: authData.selectedOperateur,\r\n    operateurId: authData.Opid,\r\n    userType: authData.userType,\r\n    isAdmin: authData.isAdmin\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}