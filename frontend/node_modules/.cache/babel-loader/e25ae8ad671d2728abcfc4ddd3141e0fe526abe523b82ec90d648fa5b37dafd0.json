{"ast":null,"code":"var _jsxFileName = \"D:\\\\Stage\\\\MarineV3\\\\frontend\\\\src\\\\components\\\\pages\\\\carte.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport '../css/carte.css';\nimport React from \"react\";\nimport Tesseract from \"tesseract.js\";\n\n// Fix Leaflet marker icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst Carte = () => {\n  _s();\n  const [lieux, setLieux] = useState([]);\n  const [rapportTitres, setRapportTitres] = useState({});\n  const mapRef = useRef(null);\n  const mapContainerRef = useRef(null);\n  const [pointActuel, setPointActuel] = useState(null);\n  const markerRefs = useRef([]);\n  const gifOverlayRef = useRef(null);\n  const [pendingGif, setPendingGif] = useState(null);\n\n  // Suppression de la saisie manuelle\n  // const [manualCoords, setManualCoords] = useState({ lat: '', lng: '' });\n\n  // Ajout pour coordonnées extraites par Tesseract\n  const [parsedCoords, setParsedCoords] = useState({\n    lat: '',\n    lng: ''\n  });\n  const [isParsing, setIsParsing] = useState(false); // Ajout de l'état de chargement\n\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\n\n  // Fonction pour convertir \"49° 35,98'\" en décimal\n  function dmToDecimal(degrees, minutes, sign = 1) {\n    // Remplace la virgule par un point pour les décimales\n    const min = parseFloat(minutes.replace(',', '.'));\n    return sign * (parseInt(degrees, 10) + min / 60);\n  }\n\n  // Fonction pour parser le GIF et extraire les coordonnées avec Tesseract\n  const parseGifForCoords = async gifDataUrl => {\n    setIsParsing(true); // Début du chargement\n    return new Promise(resolve => {\n      const img = document.createElement(\"img\");\n      img.src = gifDataUrl;\n      img.onload = async () => {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        const dataUrl = canvas.toDataURL(\"image/png\");\n        const {\n          data: {\n            text\n          }\n        } = await Tesseract.recognize(dataUrl, \"eng\");\n\n        // Regex pour extraire Latitude et Longitude au format \"49° 35,98'\"\n        const latMatch = text.match(/Lat(?:itude)?\\s*[:=]?\\s*(-?\\d{1,3})[°º]\\s*(\\d{1,2}[,.]\\d+)'?/i);\n        const lonMatch = text.match(/Lon(?:gitude)?\\s*[:=]?\\s*(-?\\d{1,3})[°º]\\s*(\\d{1,2}[,.]\\d+)'?/i);\n        let lat = \"\",\n          lng = \"\";\n        if (latMatch) {\n          const sign = parseInt(latMatch[1], 10) < 0 ? -1 : 1;\n          lat = dmToDecimal(Math.abs(latMatch[1]), latMatch[2], sign).toFixed(6);\n        }\n        if (lonMatch) {\n          const sign = parseInt(lonMatch[1], 10) < 0 ? -1 : 1;\n          lng = dmToDecimal(Math.abs(lonMatch[1]), lonMatch[2], sign).toFixed(6);\n        }\n        setIsParsing(false); // Fin du chargement\n        resolve({\n          lat: lat,\n          lng: lng\n        });\n      };\n      img.onerror = () => {\n        setIsParsing(false); // Fin du chargement même en cas d'erreur\n        resolve({\n          lat: \"\",\n          lng: \"\"\n        });\n      };\n    });\n  };\n\n  // Gère la sélection d'un fichier GIF par l'utilisateur\n  const handleGifUpload = async event => {\n    const file = event.target.files[0];\n    if (!file || !file.name.endsWith('.gif')) return;\n\n    // Utilise FileReader pour lire le fichier GIF en base64\n    const reader = new FileReader();\n    reader.onload = async function (e) {\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\n      // Appelle le parser Tesseract et met à jour les coordonnées extraites\n      const coords = await parseGifForCoords(e.target.result);\n      setParsedCoords(coords);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Valide et superpose le GIF sur la carte Leaflet\n  // Variables pour ajuster la position et l'étirement du GIF\n  const decalageX = 0.622; // Décalage horizontal (axe X)\n  const decalageY = 0.060; // Décalage vertical (axe Y)\n  const etirementX = 0.60; // Étirement horizontal (largeur)\n  const etirementY = 0.66; // Étirement vertical (hauteur)\n\n  const handleValidateGif = () => {\n    if (!pendingGif || !mapRef.current) return;\n    const img = new window.Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = () => {\n      const imageRatio = img.height / img.width;\n\n      // Utiliser les coordonnées extraites par Tesseract\n      let centerLat = parseFloat(parsedCoords.lat);\n      let centerLng = parseFloat(parsedCoords.lng);\n\n      // Si non valides, utiliser valeurs par défaut\n      if (isNaN(centerLat) || isNaN(centerLng)) {\n        centerLat = 49.87 + decalageY;\n        centerLng = (-2.18 + -0.7) / 2 + decalageX;\n      }\n      const widthDeg = 1.48 * etirementX;\n      const heightDeg = widthDeg * imageRatio * etirementY;\n      const south = centerLat - heightDeg / 2;\n      const north = centerLat + heightDeg / 2;\n      const west = centerLng - widthDeg / 2;\n      const east = centerLng + widthDeg / 2;\n      const bounds = [[south, west], [north, east]];\n      if (gifOverlayRef.current) {\n        mapRef.current.removeLayer(gifOverlayRef.current);\n        gifOverlayRef.current = null;\n      }\n      const overlay = L.imageOverlay(pendingGif, bounds, {\n        opacity: 0.7,\n        interactive: false\n      });\n      overlay.addTo(mapRef.current);\n      gifOverlayRef.current = overlay;\n      setPendingGif(null);\n    };\n    img.onerror = () => {\n      console.error('Erreur de chargement de l\\'image');\n      setPendingGif(null);\n    };\n    img.src = pendingGif;\n  };\n\n  // Fonction pour récupérer les titres des rapports\n  const fetchRapportTitres = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\n      const titres = {};\n      response.data.forEach(rapport => {\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\n      });\n      setRapportTitres(titres);\n      console.log('Titres des rapports récupérés:', titres);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\n    }\n  };\n\n  // Ajoute cette fonction avant le useEffect principal\n  const fetchLieux = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/lieux`);\n      setLieux(response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des lieux:', error);\n    }\n  };\n\n  // Initialiser la carte et charger les données\n  useEffect(() => {\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\n    if (!mapRef.current && mapContainerRef.current) {\n      // Utilisation de la couche SHOM Raster Littoral (WMTS)\n      // Documentation : https://data.shom.fr\n      // URL WMTS : https://wxs.ign.fr/essentiels/geoportail/wmts?SERVICE=WMTS&REQUEST=GetCapabilities\n      // Pour la démo, on utilise le proxy du Géoportail (IGN) qui propose la couche SHOM\n      const shomLayer = L.tileLayer('https://wxs.ign.fr/essentiels/geoportail/wmts?layer=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCANLITTORALE&style=normal&tilematrixset=PM&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image/jpeg&TileMatrix={z}&TileCol={x}&TileRow={y}', {\n        attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a> / <a href=\"https://www.ign.fr/\">IGN</a>',\n        maxZoom: 18,\n        tileSize: 256\n      });\n\n      // Couche OpenStreetMap en attendant une clé SHOM/IGN valide\n      const baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; OpenStreetMap contributors',\n        maxZoom: 18\n      });\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\n      baseLayer.addTo(mapRef.current);\n\n      // Contrôles de navigation maritime (optionnel)\n      const couchesNavigation = {\n        \"Carte OpenStreetMap\": baseLayer\n      };\n      L.control.layers(couchesNavigation, {}, {\n        position: 'topright',\n        collapsed: false\n      }).addTo(mapRef.current);\n\n      // Ajouter une échelle\n      L.control.scale({\n        metric: true,\n        imperial: false,\n        position: 'bottomleft'\n      }).addTo(mapRef.current);\n    }\n\n    // Effectuer la récupération des données au montage du composant\n    fetchLieux();\n    fetchRapportTitres();\n    return () => {\n      // Cleanup de la carte lorsque le composant est démonté\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, [API_BASE_URL]);\n\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\n  useEffect(() => {\n    if (mapRef.current && lieux.length > 0) {\n      // Supprimer uniquement les anciens marqueurs\n      markerRefs.current.forEach(marker => {\n        mapRef.current.removeLayer(marker);\n      });\n      markerRefs.current = [];\n\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\n      const coordsMap = {};\n      lieux.forEach(lieu => {\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\n        if (!coordsMap[coordKey]) {\n          coordsMap[coordKey] = [];\n        }\n        coordsMap[coordKey].push(lieu);\n      });\n\n      // Ajouter un marqueur pour chaque coordonnée unique\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\n        const [lat, lng] = coords.split(',');\n\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\n          console.warn('Coordonnées invalides:', coords);\n          return;\n        }\n\n        // Utiliser une icône de navigation maritime conforme à la signalisation\n        const iconeNavigation = L.divIcon({\n          className: 'marqueur-navigation-maritime',\n          html: `<div style=\"\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\n            border: 3px solid #1565c0;\n            border-radius: 50%;\n            width: 26px;\n            height: 26px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\n            font-size: 14px;\n            font-weight: bold;\n            color: #1565c0;\n          \">⚓</div>`,\n          iconSize: [30, 30],\n          iconAnchor: [15, 15]\n        });\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], {\n          icon: iconeNavigation\n        }).addTo(mapRef.current);\n\n        // Créer le contenu du popup avec informations de navigation maritime\n        let popupContent = `\n          <div>\n            <strong>POSITION DE NAVIGATION</strong>\n            <div>\n              <strong>Coordonnées :</strong>\n              <ul>\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\n              </ul>\n            </div>\n            <div>\n              <strong>Points d'intérêt maritime :</strong>\n              <ul>\n                ${lieuxAtCoord.map(lieu => `\n                  <li>\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\n                    ID: ${lieu.id_lieu}<br/>\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\n                      Visualiser le rapport\n                    </button>\n                  </li>\n                `).join('')}\n              </ul>\n            </div>\n          </div>\n        `;\n        marker.bindPopup(popupContent);\n\n        // Ouvrir le popup si c'est le point actuel\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\n          marker.openPopup();\n        }\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\n      });\n    }\n  }, [lieux, rapportTitres, pointActuel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-carte\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"carte-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Carte Marine \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/gif\",\n      onChange: handleGifUpload,\n      style: {\n        margin: '1em 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), isParsing && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1em',\n        color: '#1565c0',\n        fontWeight: 'bold'\n      },\n      children: \"Analyse du GIF en cours...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1em',\n        minHeight: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Latitude extraite\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: parsedCoords.lat,\n          readOnly: true,\n          style: {\n            width: 100,\n            marginRight: 10,\n            background: \"#e3f2fd\"\n          },\n          placeholder: \"Latitude\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Longitude extraite\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: parsedCoords.lng,\n          readOnly: true,\n          style: {\n            width: 100,\n            background: \"#e3f2fd\"\n          },\n          placeholder: \"Longitude\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), pendingGif && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '1em 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"GIF pr\\xEAt \\xE0 \\xEAtre superpos\\xE9.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidateGif,\n        style: {\n          marginLeft: 10\n        },\n        children: \"Valider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n};\n_s(Carte, \"llUYNxszEq1QzLtqeuDQoSWnNFU=\");\n_c = Carte;\nfunction CoordinateExtractor() {\n  _s2();\n  const [coords, setCoords] = useState({\n    lat: \"\",\n    lon: \"\"\n  });\n  const [image, setImage] = useState(null);\n  const handleGifUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    // Extraire la première frame du GIF\n    const url = URL.createObjectURL(file);\n    const img = document.createElement(\"img\");\n    img.src = url;\n    img.onload = async () => {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      const dataUrl = canvas.toDataURL(\"image/png\");\n\n      // OCR avec Tesseract\n      const {\n        data: {\n          text\n        }\n      } = await Tesseract.recognize(dataUrl, \"eng\");\n      // Extraction simple des coordonnées (à adapter selon le format du texte)\n      const latMatch = text.match(/Lat(?:itude)?[:\\s]*([-\\d.]+)/i);\n      const lonMatch = text.match(/Lon(?:gitude)?[:\\s]*([-\\d.]+)/i);\n      setCoords({\n        lat: latMatch ? latMatch[1] : \"Non trouvé\",\n        lon: lonMatch ? lonMatch[1] : \"Non trouvé\"\n      });\n    };\n    setImage(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/gif\",\n      onChange: handleGifUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"GIF preview\",\n      style: {\n        maxWidth: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 5\n  }, this);\n}\n_s2(CoordinateExtractor, \"JgY1gkq4AbeiUVhNNdwRwPjY7e0=\");\n_c2 = CoordinateExtractor;\nexport default Carte;\nvar _c, _c2;\n$RefreshReg$(_c, \"Carte\");\n$RefreshReg$(_c2, \"CoordinateExtractor\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","L","React","Tesseract","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","Carte","_s","lieux","setLieux","rapportTitres","setRapportTitres","mapRef","mapContainerRef","pointActuel","setPointActuel","markerRefs","gifOverlayRef","pendingGif","setPendingGif","parsedCoords","setParsedCoords","lat","lng","isParsing","setIsParsing","API_BASE_URL","process","env","REACT_APP_API_URL","dmToDecimal","degrees","minutes","sign","min","parseFloat","replace","parseInt","parseGifForCoords","gifDataUrl","Promise","resolve","img","document","createElement","src","onload","canvas","width","height","ctx","getContext","drawImage","dataUrl","toDataURL","data","text","recognize","latMatch","match","lonMatch","Math","abs","toFixed","onerror","handleGifUpload","event","file","target","files","name","endsWith","reader","FileReader","e","result","coords","readAsDataURL","decalageX","decalageY","etirementX","etirementY","handleValidateGif","current","window","Image","crossOrigin","imageRatio","centerLat","centerLng","isNaN","widthDeg","heightDeg","south","north","west","east","bounds","removeLayer","overlay","imageOverlay","opacity","interactive","addTo","console","error","fetchRapportTitres","response","get","titres","forEach","rapport","id_rapport","titre","log","fetchLieux","shomLayer","tileLayer","attribution","maxZoom","tileSize","baseLayer","map","setView","couchesNavigation","control","layers","position","collapsed","scale","metric","imperial","remove","length","marker","coordsMap","lieu","coordKey","latitude","longitude","push","Object","entries","lieuxAtCoord","split","warn","iconeNavigation","divIcon","className","html","iconSize","iconAnchor","icon","popupContent","details_lieu","id_lieu","join","bindPopup","some","openPopup","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","style","margin","marginBottom","color","fontWeight","minHeight","value","readOnly","marginRight","background","placeholder","onClick","marginLeft","ref","_c","CoordinateExtractor","_s2","setCoords","lon","image","setImage","url","URL","createObjectURL","alt","maxWidth","_c2","$RefreshReg$"],"sources":["D:/Stage/MarineV3/frontend/src/components/pages/carte.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport '../css/carte.css';\r\nimport React from \"react\";\r\nimport Tesseract from \"tesseract.js\";\r\n\r\n// Fix Leaflet marker icon issue\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\nconst Carte = () => {\r\n  const [lieux, setLieux] = useState([]);\r\n  const [rapportTitres, setRapportTitres] = useState({});\r\n  const mapRef = useRef(null);\r\n  const mapContainerRef = useRef(null);\r\n  const [pointActuel, setPointActuel] = useState(null);\r\n  const markerRefs = useRef([]);\r\n  const gifOverlayRef = useRef(null);\r\n  const [pendingGif, setPendingGif] = useState(null);\r\n\r\n  // Suppression de la saisie manuelle\r\n  // const [manualCoords, setManualCoords] = useState({ lat: '', lng: '' });\r\n\r\n  // Ajout pour coordonnées extraites par Tesseract\r\n  const [parsedCoords, setParsedCoords] = useState({ lat: '', lng: '' });\r\n  const [isParsing, setIsParsing] = useState(false); // Ajout de l'état de chargement\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\n  // Fonction pour convertir \"49° 35,98'\" en décimal\r\n  function dmToDecimal(degrees, minutes, sign = 1) {\r\n    // Remplace la virgule par un point pour les décimales\r\n    const min = parseFloat(minutes.replace(',', '.'));\r\n    return sign * (parseInt(degrees, 10) + min / 60);\r\n  }\r\n\r\n  // Fonction pour parser le GIF et extraire les coordonnées avec Tesseract\r\n  const parseGifForCoords = async (gifDataUrl) => {\r\n    setIsParsing(true); // Début du chargement\r\n    return new Promise((resolve) => {\r\n      const img = document.createElement(\"img\");\r\n      img.src = gifDataUrl;\r\n      img.onload = async () => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(img, 0, 0);\r\n        const dataUrl = canvas.toDataURL(\"image/png\");\r\n        const { data: { text } } = await Tesseract.recognize(dataUrl, \"eng\");\r\n\r\n        // Regex pour extraire Latitude et Longitude au format \"49° 35,98'\"\r\n        const latMatch = text.match(/Lat(?:itude)?\\s*[:=]?\\s*(-?\\d{1,3})[°º]\\s*(\\d{1,2}[,.]\\d+)'?/i);\r\n        const lonMatch = text.match(/Lon(?:gitude)?\\s*[:=]?\\s*(-?\\d{1,3})[°º]\\s*(\\d{1,2}[,.]\\d+)'?/i);\r\n\r\n        let lat = \"\", lng = \"\";\r\n\r\n        if (latMatch) {\r\n          const sign = parseInt(latMatch[1], 10) < 0 ? -1 : 1;\r\n          lat = dmToDecimal(Math.abs(latMatch[1]), latMatch[2], sign).toFixed(6);\r\n        }\r\n        if (lonMatch) {\r\n          const sign = parseInt(lonMatch[1], 10) < 0 ? -1 : 1;\r\n          lng = dmToDecimal(Math.abs(lonMatch[1]), lonMatch[2], sign).toFixed(6);\r\n        }\r\n\r\n        setIsParsing(false); // Fin du chargement\r\n        resolve({\r\n          lat: lat,\r\n          lng: lng,\r\n        });\r\n      };\r\n      img.onerror = () => {\r\n        setIsParsing(false); // Fin du chargement même en cas d'erreur\r\n        resolve({ lat: \"\", lng: \"\" });\r\n      };\r\n    });\r\n  };\r\n\r\n  // Gère la sélection d'un fichier GIF par l'utilisateur\r\n  const handleGifUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file || !file.name.endsWith('.gif')) return;\r\n\r\n    // Utilise FileReader pour lire le fichier GIF en base64\r\n    const reader = new FileReader();\r\n    reader.onload = async function (e) {\r\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\r\n      // Appelle le parser Tesseract et met à jour les coordonnées extraites\r\n      const coords = await parseGifForCoords(e.target.result);\r\n      setParsedCoords(coords);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // Valide et superpose le GIF sur la carte Leaflet\r\n  // Variables pour ajuster la position et l'étirement du GIF\r\n  const decalageX = 0.622; // Décalage horizontal (axe X)\r\n  const decalageY = 0.060; // Décalage vertical (axe Y)\r\n  const etirementX = 0.60; // Étirement horizontal (largeur)\r\n  const etirementY = 0.66; // Étirement vertical (hauteur)\r\n\r\n  const handleValidateGif = () => {\r\n    if (!pendingGif || !mapRef.current) return;\r\n\r\n    const img = new window.Image();\r\n    img.crossOrigin = 'anonymous';\r\n    img.onload = () => {\r\n      const imageRatio = img.height / img.width;\r\n\r\n      // Utiliser les coordonnées extraites par Tesseract\r\n      let centerLat = parseFloat(parsedCoords.lat);\r\n      let centerLng = parseFloat(parsedCoords.lng);\r\n\r\n      // Si non valides, utiliser valeurs par défaut\r\n      if (isNaN(centerLat) || isNaN(centerLng)) {\r\n        centerLat = 49.87 + decalageY;\r\n        centerLng = ((-2.18 + -0.7) / 2 + decalageX);\r\n      }\r\n\r\n      const widthDeg = 1.48 * etirementX;\r\n      const heightDeg = widthDeg * imageRatio * etirementY;\r\n\r\n      const south = centerLat - heightDeg / 2;\r\n      const north = centerLat + heightDeg / 2;\r\n      const west = centerLng - widthDeg / 2;\r\n      const east = centerLng + widthDeg / 2;\r\n\r\n      const bounds = [\r\n        [south, west],\r\n        [north, east]\r\n      ];\r\n\r\n      if (gifOverlayRef.current) {\r\n        mapRef.current.removeLayer(gifOverlayRef.current);\r\n        gifOverlayRef.current = null;\r\n      }\r\n\r\n      const overlay = L.imageOverlay(pendingGif, bounds, {\r\n        opacity: 0.7,\r\n        interactive: false\r\n      });\r\n      overlay.addTo(mapRef.current);\r\n      gifOverlayRef.current = overlay;\r\n\r\n      setPendingGif(null);\r\n    };\r\n\r\n    img.onerror = () => {\r\n      console.error('Erreur de chargement de l\\'image');\r\n      setPendingGif(null);\r\n    };\r\n\r\n    img.src = pendingGif;\r\n  };\r\n\r\n\r\n\r\n  // Fonction pour récupérer les titres des rapports\r\n  const fetchRapportTitres = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\r\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\r\n      const titres = {};\r\n      response.data.forEach(rapport => {\r\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\r\n      });\r\n      setRapportTitres(titres);\r\n      console.log('Titres des rapports récupérés:', titres);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\r\n    }\r\n  };\r\n\r\n  // Ajoute cette fonction avant le useEffect principal\r\n  const fetchLieux = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/lieux`);\r\n      setLieux(response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des lieux:', error);\r\n    }\r\n  };\r\n\r\n  // Initialiser la carte et charger les données\r\n  useEffect(() => {\r\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\r\n    if (!mapRef.current && mapContainerRef.current) {\r\n      // Utilisation de la couche SHOM Raster Littoral (WMTS)\r\n      // Documentation : https://data.shom.fr\r\n      // URL WMTS : https://wxs.ign.fr/essentiels/geoportail/wmts?SERVICE=WMTS&REQUEST=GetCapabilities\r\n      // Pour la démo, on utilise le proxy du Géoportail (IGN) qui propose la couche SHOM\r\n      const shomLayer = L.tileLayer(\r\n        'https://wxs.ign.fr/essentiels/geoportail/wmts?layer=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCANLITTORALE&style=normal&tilematrixset=PM&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image/jpeg&TileMatrix={z}&TileCol={x}&TileRow={y}',\r\n        {\r\n          attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a> / <a href=\"https://www.ign.fr/\">IGN</a>',\r\n          maxZoom: 18,\r\n          tileSize: 256,\r\n        }\r\n      );\r\n\r\n      // Couche OpenStreetMap en attendant une clé SHOM/IGN valide\r\n      const baseLayer = L.tileLayer(\r\n        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n        {\r\n          attribution: '&copy; OpenStreetMap contributors',\r\n          maxZoom: 18,\r\n        }\r\n      );\r\n\r\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\r\n      baseLayer.addTo(mapRef.current);\r\n\r\n      // Contrôles de navigation maritime (optionnel)\r\n      const couchesNavigation = {\r\n        \"Carte OpenStreetMap\": baseLayer\r\n      };\r\n\r\n      L.control.layers(couchesNavigation, {}, {\r\n        position: 'topright',\r\n        collapsed: false\r\n      }).addTo(mapRef.current);\r\n\r\n      // Ajouter une échelle\r\n      L.control.scale({\r\n        metric: true,\r\n        imperial: false,\r\n        position: 'bottomleft'\r\n      }).addTo(mapRef.current);\r\n    }\r\n\r\n    // Effectuer la récupération des données au montage du composant\r\n    fetchLieux();\r\n    fetchRapportTitres();\r\n\r\n    return () => {\r\n      // Cleanup de la carte lorsque le composant est démonté\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n        mapRef.current = null;\r\n      }\r\n    };\r\n  }, [API_BASE_URL]);\r\n\r\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\r\n  useEffect(() => {\r\n    if (mapRef.current && lieux.length > 0) {\r\n      // Supprimer uniquement les anciens marqueurs\r\n      markerRefs.current.forEach(marker => {\r\n        mapRef.current.removeLayer(marker);\r\n      });\r\n      markerRefs.current = [];\r\n\r\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\r\n      const coordsMap = {};\r\n\r\n      lieux.forEach(lieu => {\r\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\r\n        if (!coordsMap[coordKey]) {\r\n          coordsMap[coordKey] = [];\r\n        }\r\n        coordsMap[coordKey].push(lieu);\r\n      });\r\n\r\n      // Ajouter un marqueur pour chaque coordonnée unique\r\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\r\n        const [lat, lng] = coords.split(',');\r\n\r\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\r\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\r\n          console.warn('Coordonnées invalides:', coords);\r\n          return;\r\n        }\r\n\r\n        // Utiliser une icône de navigation maritime conforme à la signalisation\r\n        const iconeNavigation = L.divIcon({\r\n          className: 'marqueur-navigation-maritime',\r\n          html: `<div style=\"\r\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\r\n            border: 3px solid #1565c0;\r\n            border-radius: 50%;\r\n            width: 26px;\r\n            height: 26px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            color: #1565c0;\r\n          \">⚓</div>`,\r\n          iconSize: [30, 30],\r\n          iconAnchor: [15, 15]\r\n        });\r\n\r\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], { icon: iconeNavigation }).addTo(mapRef.current);\r\n\r\n        // Créer le contenu du popup avec informations de navigation maritime\r\n        let popupContent = `\r\n          <div>\r\n            <strong>POSITION DE NAVIGATION</strong>\r\n            <div>\r\n              <strong>Coordonnées :</strong>\r\n              <ul>\r\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\r\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <strong>Points d'intérêt maritime :</strong>\r\n              <ul>\r\n                ${lieuxAtCoord.map(lieu => `\r\n                  <li>\r\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\r\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\r\n                    ID: ${lieu.id_lieu}<br/>\r\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\r\n                      Visualiser le rapport\r\n                    </button>\r\n                  </li>\r\n                `).join('')}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        marker.bindPopup(popupContent);\r\n\r\n        // Ouvrir le popup si c'est le point actuel\r\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\r\n          marker.openPopup();\r\n        }\r\n\r\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\r\n      });\r\n    }\r\n  }, [lieux, rapportTitres, pointActuel]);\r\n\r\n  return (\r\n    <div className=\"page-carte\">\r\n      <div className=\"carte-header\">\r\n        <h2>Carte Marine </h2>\r\n      </div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/gif\"\r\n        onChange={handleGifUpload}\r\n        style={{ margin: '1em 0' }}\r\n      />\r\n\r\n      {/* Affichage du chargement */}\r\n      {isParsing && (\r\n        <div style={{ marginBottom: '1em', color: '#1565c0', fontWeight: 'bold' }}>\r\n          Analyse du GIF en cours...\r\n        </div>\r\n      )}\r\n\r\n      {/* Affichage des coordonnées extraites */}\r\n      <div style={{ marginBottom: '1em', minHeight: 24 }}>\r\n        <label>\r\n          Latitude extraite&nbsp;\r\n          <input\r\n            type=\"text\"\r\n            value={parsedCoords.lat}\r\n            readOnly\r\n            style={{ width: 100, marginRight: 10, background: \"#e3f2fd\" }}\r\n            placeholder=\"Latitude\"\r\n          />\r\n        </label>\r\n        <label>\r\n          Longitude extraite&nbsp;\r\n          <input\r\n            type=\"text\"\r\n            value={parsedCoords.lng}\r\n            readOnly\r\n            style={{ width: 100, background: \"#e3f2fd\" }}\r\n            placeholder=\"Longitude\"\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      {pendingGif && (\r\n        <div style={{ margin: '1em 0' }}>\r\n          <span>GIF prêt à être superposé.</span>\r\n          <button onClick={handleValidateGif} style={{ marginLeft: 10 }}>\r\n            Valider\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div\r\n        ref={mapContainerRef}\r\n        className=\"map-container\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction CoordinateExtractor() {\r\n  const [coords, setCoords] = useState({ lat: \"\", lon: \"\" });\r\n  const [image, setImage] = useState(null);\r\n\r\n  const handleGifUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    // Extraire la première frame du GIF\r\n    const url = URL.createObjectURL(file);\r\n    const img = document.createElement(\"img\");\r\n    img.src = url;\r\n    img.onload = async () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      const dataUrl = canvas.toDataURL(\"image/png\");\r\n\r\n      // OCR avec Tesseract\r\n      const { data: { text } } = await Tesseract.recognize(dataUrl, \"eng\");\r\n      // Extraction simple des coordonnées (à adapter selon le format du texte)\r\n      const latMatch = text.match(/Lat(?:itude)?[:\\s]*([-\\d.]+)/i);\r\n      const lonMatch = text.match(/Lon(?:gitude)?[:\\s]*([-\\d.]+)/i);\r\n      setCoords({\r\n        lat: latMatch ? latMatch[1] : \"Non trouvé\",\r\n        lon: lonMatch ? lonMatch[1] : \"Non trouvé\",\r\n      });\r\n    };\r\n    setImage(url);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" accept=\"image/gif\" onChange={handleGifUpload} />\r\n      {image && <img src={image} alt=\"GIF preview\" style={{ maxWidth: 300 }} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Carte;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}