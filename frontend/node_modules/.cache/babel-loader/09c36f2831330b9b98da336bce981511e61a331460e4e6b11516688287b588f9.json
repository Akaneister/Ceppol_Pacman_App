{"ast":null,"code":"var _jsxFileName = \"D:\\\\Stage\\\\MarineV3\\\\frontend\\\\src\\\\components\\\\pages\\\\carte.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport '../css/carte.css';\n\n// Fix Leaflet marker icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst SHOM_WMS_URL = 'https://services.data.shom.fr/INSPIRE/wms/r?apikey=vpsg23trbswcecn8w5gx34l0';\nconst Carte = () => {\n  _s();\n  const [lieux, setLieux] = useState([]);\n  const [rapportTitres, setRapportTitres] = useState({});\n  const mapRef = useRef(null);\n  const mapContainerRef = useRef(null);\n  const [pointActuel, setPointActuel] = useState(null);\n  const markerRefs = useRef([]);\n  const gifOverlayRef = useRef(null);\n  const [pendingGif, setPendingGif] = useState(null);\n\n  // Ajout pour la saisie manuelle\n  const [manualCoords, setManualCoords] = useState({\n    lat: '',\n    lng: ''\n  });\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\n\n  // Fonction pour récupérer les lieux depuis l'API\n  const fetchLieux = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\n      setLieux(response.data);\n      console.log('Lieux récupérés:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des lieux:', error);\n    }\n  };\n\n  // Gère la sélection d'un fichier GIF par l'utilisateur\n  const handleGifUpload = event => {\n    const file = event.target.files[0];\n    if (!file || !file.name.endsWith('.gif')) return;\n\n    // Utilise FileReader pour lire le fichier GIF en base64\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Valide et superpose le GIF sur la carte Leaflet\n  // Variables pour ajuster la position et l'étirement du GIF\n  const decalageX = 0.622; // Décalage horizontal (axe X)\n  const decalageY = 0.060; // Décalage vertical (axe Y)\n  const etirementX = 0.60; // Étirement horizontal (largeur)\n  const etirementY = 0.66; // Étirement vertical (hauteur)\n\n  const handleValidateGif = () => {\n    if (!pendingGif || !mapRef.current) return;\n    const img = new window.Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = () => {\n      const imageRatio = img.height / img.width;\n\n      // Utiliser les coordonnées saisies\n      let centerLat = parseFloat(manualCoords.lat);\n      let centerLng = parseFloat(manualCoords.lng);\n\n      // Si non valides, utiliser valeurs par défaut\n      if (isNaN(centerLat) || isNaN(centerLng)) {\n        centerLat = 49.87 + decalageY;\n        centerLng = (-2.18 + -0.7) / 2 + decalageX;\n      }\n      const widthDeg = 1.48 * etirementX;\n      const heightDeg = widthDeg * imageRatio * etirementY;\n      const south = centerLat - heightDeg / 2;\n      const north = centerLat + heightDeg / 2;\n      const west = centerLng - widthDeg / 2;\n      const east = centerLng + widthDeg / 2;\n      const bounds = [[south, west], [north, east]];\n      if (gifOverlayRef.current) {\n        mapRef.current.removeLayer(gifOverlayRef.current);\n        gifOverlayRef.current = null;\n      }\n      const overlay = L.imageOverlay(pendingGif, bounds, {\n        opacity: 0.7,\n        interactive: false\n      });\n      overlay.addTo(mapRef.current);\n      gifOverlayRef.current = overlay;\n      setPendingGif(null);\n    };\n    img.onerror = () => {\n      console.error('Erreur de chargement de l\\'image');\n      setPendingGif(null);\n    };\n    img.src = pendingGif;\n  };\n\n  // Fonction pour récupérer les titres des rapports\n  const fetchRapportTitres = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\n      const titres = {};\n      response.data.forEach(rapport => {\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\n      });\n      setRapportTitres(titres);\n      console.log('Titres des rapports récupérés:', titres);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\n    }\n  };\n\n  // Initialiser la carte et charger les données\n  useEffect(() => {\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\n    if (!mapRef.current && mapContainerRef.current) {\n      // Couche WMS Raster SHOM - Scan Littoral\n      const shomWmsLayer = L.tileLayer.wms('https://services.data.shom.fr/INSPIRE/wms/r?apikey=vpsg23trbswcecn8w5gx34l0', {\n        layers: 'SCAN-LITTO_PYR-PNG_WLD_3857_WMSR',\n        format: 'image/png',\n        transparent: true,\n        version: '1.3.0',\n        attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a>'\n      });\n\n      // Couche OpenStreetMap en secours\n      const baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; OpenStreetMap contributors',\n        maxZoom: 18\n      });\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\n      shomWmsLayer.addTo(mapRef.current);\n\n      // Contrôles de navigation maritime (optionnel)\n      const couchesNavigation = {\n        \"Carte OpenStreetMap\": baseLayer,\n        \"SHOM Scan Littoral\": shomWmsLayer\n      };\n      L.control.layers(couchesNavigation, {}, {\n        position: 'topright',\n        collapsed: false\n      }).addTo(mapRef.current);\n\n      // Ajouter une échelle\n      L.control.scale({\n        metric: true,\n        imperial: false,\n        position: 'bottomleft'\n      }).addTo(mapRef.current);\n    }\n\n    // Effectuer la récupération des données au montage du composant\n    fetchLieux();\n    fetchRapportTitres();\n    return () => {\n      // Cleanup de la carte lorsque le composant est démonté\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, [API_BASE_URL]);\n\n  // Récupérer dynamiquement les couches WMS du SHOM\n  useEffect(() => {\n    const fetchWmsLayers = async () => {\n      try {\n        const response = await axios.get(`${SHOM_WMS_URL}&service=WMS&request=GetCapabilities`);\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(response.data, 'text/xml');\n        const layers = Array.from(xml.getElementsByTagName('Layer')).filter(layer => layer.getElementsByTagName('Name')[0]).map(layer => {\n          var _layer$getElementsByT;\n          return {\n            name: layer.getElementsByTagName('Name')[0].textContent,\n            title: ((_layer$getElementsByT = layer.getElementsByTagName('Title')[0]) === null || _layer$getElementsByT === void 0 ? void 0 : _layer$getElementsByT.textContent) || ''\n          };\n        })\n        // On ne garde que les couches \"feuilles\" (qui ont un nom)\n        .filter(l => l.name && l.name !== '');\n        setWmsLayers(layers);\n        // Sélectionner la première couche par défaut\n        if (layers.length > 0) setSelectedWmsLayer(layers[0].name);\n      } catch (err) {\n        console.error('Erreur lors de la récupération des couches WMS:', err);\n      }\n    };\n    fetchWmsLayers();\n  }, []);\n\n  // Gestion dynamique de la couche WMS sélectionnée\n  const wmsLayerRef = useRef(null);\n  useEffect(() => {\n    if (!mapRef.current || !selectedWmsLayer) return;\n\n    // Supprimer l'ancienne couche WMS si présente\n    if (wmsLayerRef.current) {\n      mapRef.current.removeLayer(wmsLayerRef.current);\n      wmsLayerRef.current = null;\n    }\n\n    // Ajouter la nouvelle couche WMS sélectionnée\n    const newLayer = L.tileLayer.wms(SHOM_WMS_URL, {\n      layers: selectedWmsLayer,\n      format: 'image/png',\n      transparent: true,\n      version: '1.3.0',\n      attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a>'\n    });\n    newLayer.addTo(mapRef.current);\n    wmsLayerRef.current = newLayer;\n  }, [selectedWmsLayer]);\n\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\n  useEffect(() => {\n    if (mapRef.current && lieux.length > 0) {\n      // Supprimer uniquement les anciens marqueurs\n      markerRefs.current.forEach(marker => {\n        mapRef.current.removeLayer(marker);\n      });\n      markerRefs.current = [];\n\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\n      const coordsMap = {};\n      lieux.forEach(lieu => {\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\n        if (!coordsMap[coordKey]) {\n          coordsMap[coordKey] = [];\n        }\n        coordsMap[coordKey].push(lieu);\n      });\n\n      // Ajouter un marqueur pour chaque coordonnée unique\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\n        const [lat, lng] = coords.split(',');\n\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\n          console.warn('Coordonnées invalides:', coords);\n          return;\n        }\n\n        // Utiliser une icône de navigation maritime conforme à la signalisation\n        const iconeNavigation = L.divIcon({\n          className: 'marqueur-navigation-maritime',\n          html: `<div style=\"\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\n            border: 3px solid #1565c0;\n            border-radius: 50%;\n            width: 26px;\n            height: 26px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\n            font-size: 14px;\n            font-weight: bold;\n            color: #1565c0;\n          \">⚓</div>`,\n          iconSize: [30, 30],\n          iconAnchor: [15, 15]\n        });\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], {\n          icon: iconeNavigation\n        }).addTo(mapRef.current);\n\n        // Créer le contenu du popup avec informations de navigation maritime\n        let popupContent = `\n          <div>\n            <strong>POSITION DE NAVIGATION</strong>\n            <div>\n              <strong>Coordonnées :</strong>\n              <ul>\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\n              </ul>\n            </div>\n            <div>\n              <strong>Points d'intérêt maritime :</strong>\n              <ul>\n                ${lieuxAtCoord.map(lieu => `\n                  <li>\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\n                    ID: ${lieu.id_lieu}<br/>\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\n                      Visualiser le rapport\n                    </button>\n                  </li>\n                `).join('')}\n              </ul>\n            </div>\n          </div>\n        `;\n        marker.bindPopup(popupContent);\n\n        // Ouvrir le popup si c'est le point actuel\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\n          marker.openPopup();\n        }\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\n      });\n    }\n  }, [lieux, rapportTitres, pointActuel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-carte\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"carte-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Carte Marine \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Couche SHOM\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedWmsLayer,\n          onChange: e => setSelectedWmsLayer(e.target.value),\n          style: {\n            minWidth: 250\n          },\n          children: wmsLayers.map(layer => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: layer.name,\n            children: layer.title || layer.name\n          }, layer.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/gif\",\n      onChange: handleGifUpload,\n      style: {\n        margin: '1em 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1em',\n        minHeight: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Latitude\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"any\",\n          value: manualCoords.lat,\n          onChange: e => setManualCoords({\n            ...manualCoords,\n            lat: e.target.value\n          }),\n          style: {\n            width: 100,\n            marginRight: 10\n          },\n          placeholder: \"ex: 49.87\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Longitude\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"any\",\n          value: manualCoords.lng,\n          onChange: e => setManualCoords({\n            ...manualCoords,\n            lng: e.target.value\n          }),\n          style: {\n            width: 100\n          },\n          placeholder: \"ex: -1.5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), pendingGif && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '1em 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"GIF pr\\xEAt \\xE0 \\xEAtre superpos\\xE9.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidateGif,\n        style: {\n          marginLeft: 10\n        },\n        children: \"Valider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s(Carte, \"QCO3A73yivSRGHlpQ8a1nBShCl8=\");\n_c = Carte;\nexport default Carte;\nvar _c;\n$RefreshReg$(_c, \"Carte\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","SHOM_WMS_URL","Carte","_s","lieux","setLieux","rapportTitres","setRapportTitres","mapRef","mapContainerRef","pointActuel","setPointActuel","markerRefs","gifOverlayRef","pendingGif","setPendingGif","manualCoords","setManualCoords","lat","lng","API_BASE_URL","process","env","REACT_APP_API_URL","fetchLieux","response","get","data","console","log","error","handleGifUpload","event","file","target","files","name","endsWith","reader","FileReader","onload","e","result","readAsDataURL","decalageX","decalageY","etirementX","etirementY","handleValidateGif","current","img","window","Image","crossOrigin","imageRatio","height","width","centerLat","parseFloat","centerLng","isNaN","widthDeg","heightDeg","south","north","west","east","bounds","removeLayer","overlay","imageOverlay","opacity","interactive","addTo","onerror","src","fetchRapportTitres","titres","forEach","rapport","id_rapport","titre","shomWmsLayer","tileLayer","wms","layers","format","transparent","version","attribution","baseLayer","maxZoom","map","setView","couchesNavigation","control","position","collapsed","scale","metric","imperial","remove","fetchWmsLayers","parser","DOMParser","xml","parseFromString","Array","from","getElementsByTagName","filter","layer","_layer$getElementsByT","textContent","title","l","setWmsLayers","length","setSelectedWmsLayer","err","wmsLayerRef","selectedWmsLayer","newLayer","marker","coordsMap","lieu","coordKey","latitude","longitude","push","Object","entries","coords","lieuxAtCoord","split","warn","iconeNavigation","divIcon","className","html","iconSize","iconAnchor","icon","popupContent","toFixed","details_lieu","id_lieu","join","bindPopup","some","openPopup","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","value","onChange","minWidth","wmsLayers","type","accept","margin","minHeight","step","marginRight","placeholder","onClick","marginLeft","ref","_c","$RefreshReg$"],"sources":["D:/Stage/MarineV3/frontend/src/components/pages/carte.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport '../css/carte.css';\r\n\r\n// Fix Leaflet marker icon issue\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\nconst SHOM_WMS_URL = 'https://services.data.shom.fr/INSPIRE/wms/r?apikey=vpsg23trbswcecn8w5gx34l0';\r\n\r\nconst Carte = () => {\r\n  const [lieux, setLieux] = useState([]);\r\n  const [rapportTitres, setRapportTitres] = useState({});\r\n  const mapRef = useRef(null);\r\n  const mapContainerRef = useRef(null);\r\n  const [pointActuel, setPointActuel] = useState(null);\r\n  const markerRefs = useRef([]);\r\n  const gifOverlayRef = useRef(null);\r\n  const [pendingGif, setPendingGif] = useState(null);\r\n\r\n  // Ajout pour la saisie manuelle\r\n  const [manualCoords, setManualCoords] = useState({ lat: '', lng: '' });\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\n  // Fonction pour récupérer les lieux depuis l'API\r\n  const fetchLieux = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\r\n      setLieux(response.data);\r\n      console.log('Lieux récupérés:', response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des lieux:', error);\r\n    }\r\n  };\r\n\r\n  // Gère la sélection d'un fichier GIF par l'utilisateur\r\n  const handleGifUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file || !file.name.endsWith('.gif')) return;\r\n\r\n    // Utilise FileReader pour lire le fichier GIF en base64\r\n    const reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // Valide et superpose le GIF sur la carte Leaflet\r\n  // Variables pour ajuster la position et l'étirement du GIF\r\n  const decalageX = 0.622; // Décalage horizontal (axe X)\r\n  const decalageY = 0.060; // Décalage vertical (axe Y)\r\n  const etirementX = 0.60; // Étirement horizontal (largeur)\r\n  const etirementY = 0.66; // Étirement vertical (hauteur)\r\n\r\n  const handleValidateGif = () => {\r\n    if (!pendingGif || !mapRef.current) return;\r\n\r\n    const img = new window.Image();\r\n    img.crossOrigin = 'anonymous';\r\n    img.onload = () => {\r\n      const imageRatio = img.height / img.width;\r\n\r\n      // Utiliser les coordonnées saisies\r\n      let centerLat = parseFloat(manualCoords.lat);\r\n      let centerLng = parseFloat(manualCoords.lng);\r\n\r\n      // Si non valides, utiliser valeurs par défaut\r\n      if (isNaN(centerLat) || isNaN(centerLng)) {\r\n        centerLat = 49.87 + decalageY;\r\n        centerLng = ((-2.18 + -0.7) / 2 + decalageX);\r\n      }\r\n\r\n      const widthDeg = 1.48 * etirementX;\r\n      const heightDeg = widthDeg * imageRatio * etirementY;\r\n\r\n      const south = centerLat - heightDeg / 2;\r\n      const north = centerLat + heightDeg / 2;\r\n      const west = centerLng - widthDeg / 2;\r\n      const east = centerLng + widthDeg / 2;\r\n\r\n      const bounds = [\r\n        [south, west],\r\n        [north, east]\r\n      ];\r\n\r\n      if (gifOverlayRef.current) {\r\n        mapRef.current.removeLayer(gifOverlayRef.current);\r\n        gifOverlayRef.current = null;\r\n      }\r\n\r\n      const overlay = L.imageOverlay(pendingGif, bounds, {\r\n        opacity: 0.7,\r\n        interactive: false\r\n      });\r\n      overlay.addTo(mapRef.current);\r\n      gifOverlayRef.current = overlay;\r\n\r\n      setPendingGif(null);\r\n    };\r\n\r\n    img.onerror = () => {\r\n      console.error('Erreur de chargement de l\\'image');\r\n      setPendingGif(null);\r\n    };\r\n\r\n    img.src = pendingGif;\r\n  };\r\n\r\n\r\n\r\n  // Fonction pour récupérer les titres des rapports\r\n  const fetchRapportTitres = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\r\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\r\n      const titres = {};\r\n      response.data.forEach(rapport => {\r\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\r\n      });\r\n      setRapportTitres(titres);\r\n      console.log('Titres des rapports récupérés:', titres);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\r\n    }\r\n  };\r\n\r\n  // Initialiser la carte et charger les données\r\n  useEffect(() => {\r\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\r\n    if (!mapRef.current && mapContainerRef.current) {\r\n      // Couche WMS Raster SHOM - Scan Littoral\r\n      const shomWmsLayer = L.tileLayer.wms(\r\n        'https://services.data.shom.fr/INSPIRE/wms/r?apikey=vpsg23trbswcecn8w5gx34l0',\r\n        {\r\n          layers: 'SCAN-LITTO_PYR-PNG_WLD_3857_WMSR',\r\n          format: 'image/png',\r\n          transparent: true,\r\n          version: '1.3.0',\r\n          attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a>',\r\n        }\r\n      );\r\n\r\n\r\n      // Couche OpenStreetMap en secours\r\n      const baseLayer = L.tileLayer(\r\n        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n        {\r\n          attribution: '&copy; OpenStreetMap contributors',\r\n          maxZoom: 18,\r\n        }\r\n      );\r\n\r\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\r\n      shomWmsLayer.addTo(mapRef.current);\r\n\r\n      // Contrôles de navigation maritime (optionnel)\r\n      const couchesNavigation = {\r\n        \"Carte OpenStreetMap\": baseLayer,\r\n        \"SHOM Scan Littoral\": shomWmsLayer\r\n      };\r\n\r\n      L.control.layers(couchesNavigation, {}, {\r\n        position: 'topright',\r\n        collapsed: false\r\n      }).addTo(mapRef.current);\r\n\r\n      // Ajouter une échelle\r\n      L.control.scale({\r\n        metric: true,\r\n        imperial: false,\r\n        position: 'bottomleft'\r\n      }).addTo(mapRef.current);\r\n    }\r\n\r\n    // Effectuer la récupération des données au montage du composant\r\n    fetchLieux();\r\n    fetchRapportTitres();\r\n\r\n    return () => {\r\n      // Cleanup de la carte lorsque le composant est démonté\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n        mapRef.current = null;\r\n      }\r\n    };\r\n  }, [API_BASE_URL]);\r\n\r\n  // Récupérer dynamiquement les couches WMS du SHOM\r\n  useEffect(() => {\r\n    const fetchWmsLayers = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${SHOM_WMS_URL}&service=WMS&request=GetCapabilities`\r\n        );\r\n        const parser = new DOMParser();\r\n        const xml = parser.parseFromString(response.data, 'text/xml');\r\n        const layers = Array.from(xml.getElementsByTagName('Layer'))\r\n          .filter(layer => layer.getElementsByTagName('Name')[0])\r\n          .map(layer => ({\r\n            name: layer.getElementsByTagName('Name')[0].textContent,\r\n            title: layer.getElementsByTagName('Title')[0]?.textContent || ''\r\n          }))\r\n          // On ne garde que les couches \"feuilles\" (qui ont un nom)\r\n          .filter(l => l.name && l.name !== ''); \r\n        setWmsLayers(layers);\r\n        // Sélectionner la première couche par défaut\r\n        if (layers.length > 0) setSelectedWmsLayer(layers[0].name);\r\n      } catch (err) {\r\n        console.error('Erreur lors de la récupération des couches WMS:', err);\r\n      }\r\n    };\r\n    fetchWmsLayers();\r\n  }, []);\r\n\r\n  // Gestion dynamique de la couche WMS sélectionnée\r\n  const wmsLayerRef = useRef(null);\r\n  useEffect(() => {\r\n    if (!mapRef.current || !selectedWmsLayer) return;\r\n\r\n    // Supprimer l'ancienne couche WMS si présente\r\n    if (wmsLayerRef.current) {\r\n      mapRef.current.removeLayer(wmsLayerRef.current);\r\n      wmsLayerRef.current = null;\r\n    }\r\n\r\n    // Ajouter la nouvelle couche WMS sélectionnée\r\n    const newLayer = L.tileLayer.wms(\r\n      SHOM_WMS_URL,\r\n      {\r\n        layers: selectedWmsLayer,\r\n        format: 'image/png',\r\n        transparent: true,\r\n        version: '1.3.0',\r\n        attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a>',\r\n      }\r\n    );\r\n    newLayer.addTo(mapRef.current);\r\n    wmsLayerRef.current = newLayer;\r\n  }, [selectedWmsLayer]);\r\n\r\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\r\n  useEffect(() => {\r\n    if (mapRef.current && lieux.length > 0) {\r\n      // Supprimer uniquement les anciens marqueurs\r\n      markerRefs.current.forEach(marker => {\r\n        mapRef.current.removeLayer(marker);\r\n      });\r\n      markerRefs.current = [];\r\n\r\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\r\n      const coordsMap = {};\r\n\r\n      lieux.forEach(lieu => {\r\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\r\n        if (!coordsMap[coordKey]) {\r\n          coordsMap[coordKey] = [];\r\n        }\r\n        coordsMap[coordKey].push(lieu);\r\n      });\r\n\r\n      // Ajouter un marqueur pour chaque coordonnée unique\r\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\r\n        const [lat, lng] = coords.split(',');\r\n\r\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\r\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\r\n          console.warn('Coordonnées invalides:', coords);\r\n          return;\r\n        }\r\n\r\n        // Utiliser une icône de navigation maritime conforme à la signalisation\r\n        const iconeNavigation = L.divIcon({\r\n          className: 'marqueur-navigation-maritime',\r\n          html: `<div style=\"\r\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\r\n            border: 3px solid #1565c0;\r\n            border-radius: 50%;\r\n            width: 26px;\r\n            height: 26px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            color: #1565c0;\r\n          \">⚓</div>`,\r\n          iconSize: [30, 30],\r\n          iconAnchor: [15, 15]\r\n        });\r\n\r\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], { icon: iconeNavigation }).addTo(mapRef.current);\r\n\r\n        // Créer le contenu du popup avec informations de navigation maritime\r\n        let popupContent = `\r\n          <div>\r\n            <strong>POSITION DE NAVIGATION</strong>\r\n            <div>\r\n              <strong>Coordonnées :</strong>\r\n              <ul>\r\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\r\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <strong>Points d'intérêt maritime :</strong>\r\n              <ul>\r\n                ${lieuxAtCoord.map(lieu => `\r\n                  <li>\r\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\r\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\r\n                    ID: ${lieu.id_lieu}<br/>\r\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\r\n                      Visualiser le rapport\r\n                    </button>\r\n                  </li>\r\n                `).join('')}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        marker.bindPopup(popupContent);\r\n\r\n        // Ouvrir le popup si c'est le point actuel\r\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\r\n          marker.openPopup();\r\n        }\r\n\r\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\r\n      });\r\n    }\r\n  }, [lieux, rapportTitres, pointActuel]);\r\n\r\n  return (\r\n    <div className=\"page-carte\">\r\n      <div className=\"carte-header\">\r\n        <h2>Carte Marine </h2>\r\n      </div>\r\n\r\n      {/* Menu déroulant pour choisir la couche WMS */}\r\n      <div style={{ marginBottom: 16 }}>\r\n        <label>\r\n          Couche SHOM&nbsp;\r\n          <select\r\n            value={selectedWmsLayer}\r\n            onChange={e => setSelectedWmsLayer(e.target.value)}\r\n            style={{ minWidth: 250 }}\r\n          >\r\n            {wmsLayers.map(layer => (\r\n              <option key={layer.name} value={layer.name}>\r\n                {layer.title || layer.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </div>\r\n\r\n      {/* Saisie du fichier GIF */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/gif\"\r\n        onChange={handleGifUpload}\r\n        style={{ margin: '1em 0' }}\r\n      />\r\n\r\n      {/* Saisie manuelle des coordonnées */}\r\n      <div style={{ marginBottom: '1em', minHeight: 24 }}>\r\n        <label>\r\n          Latitude&nbsp;\r\n          <input\r\n            type=\"number\"\r\n            step=\"any\"\r\n            value={manualCoords.lat}\r\n            onChange={e => setManualCoords({ ...manualCoords, lat: e.target.value })}\r\n            style={{ width: 100, marginRight: 10 }}\r\n            placeholder=\"ex: 49.87\"\r\n          />\r\n        </label>\r\n        <label>\r\n          Longitude&nbsp;\r\n          <input\r\n            type=\"number\"\r\n            step=\"any\"\r\n            value={manualCoords.lng}\r\n            onChange={e => setManualCoords({ ...manualCoords, lng: e.target.value })}\r\n            style={{ width: 100 }}\r\n            placeholder=\"ex: -1.5\"\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      {pendingGif && (\r\n        <div style={{ margin: '1em 0' }}>\r\n          <span>GIF prêt à être superposé.</span>\r\n          <button onClick={handleValidateGif} style={{ marginLeft: 10 }}>\r\n            Valider\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div\r\n        ref={mapContainerRef}\r\n        className=\"map-container\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Carte;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}