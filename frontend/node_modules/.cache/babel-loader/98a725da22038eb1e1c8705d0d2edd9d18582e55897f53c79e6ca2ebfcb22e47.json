{"ast":null,"code":"var _jsxFileName = \"D:\\\\Stage\\\\MarineV3\\\\frontend\\\\src\\\\components\\\\pages\\\\carte.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport '../css/carte.css';\nimport Tesseract from 'tesseract.js';\n\n// Fix Leaflet marker icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst Carte = () => {\n  _s();\n  const [lieux, setLieux] = useState([]); // Liste des lieux à afficher\n  const [rapportTitres, setRapportTitres] = useState({}); // Titres des rapports indexés par id_rapport\n  const mapRef = useRef(null); // Référence pour la carte\n  const mapContainerRef = useRef(null); // Référence pour le container de la carte\n  const [pointActuel, setPointActuel] = useState(null);\n  const markerRefs = useRef([]); // Ajoutez ceci en haut du composant Carte\n  const gifOverlayRef = useRef(null); // Ajoutez ceci pour gérer l'overlay GIF\n  const [pendingGif, setPendingGif] = useState(null); // Ajouté pour stocker le GIF temporairement\n  const [tesseractCoords, setTesseractCoords] = useState(null); // Ajouté pour afficher les coordonnées extraites\n\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\n\n  // Fonction pour récupérer les lieux depuis l'API\n  const fetchLieux = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\n      setLieux(response.data);\n      console.log('Lieux récupérés:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des lieux:', error);\n    }\n  };\n\n  // Gère la sélection d'un fichier GIF par l'utilisateur\n  const handleGifUpload = event => {\n    const file = event.target.files[0];\n    if (!file || !file.name.endsWith('.gif')) return;\n\n    // Utilise FileReader pour lire le fichier GIF en base64\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Valide et superpose le GIF sur la carte Leaflet\n  // Variables pour ajuster la position et l'étirement du GIF\n  const decalageX = 0.622; // Décalage horizontal (axe X)\n  const decalageY = 0.060; // Décalage vertical (axe Y)\n  const etirementX = 0.60; // Étirement horizontal (largeur)\n  const etirementY = 0.66; // Étirement vertical (hauteur)\n\n  const handleValidateGif = () => {\n    if (!pendingGif || !mapRef.current) return;\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n      Tesseract.recognize(canvas, 'eng').then(({\n        data: {\n          text\n        }\n      }) => {\n        var _coords$lat, _coords, _coords$lng, _coords2;\n        const imageRatio = img.height / img.width;\n\n        // Fonction utilitaire pour convertir degrés/minutes en décimal\n        const convertirEnDecimal = (degres, minutes, secondes = 0) => {\n          return degres + (minutes + secondes / 100) / 60;\n        };\n\n        // Fonction pour extraire la position initiale\n        const extrairePositionInitiale = texte => {\n          // Regex plus robuste pour différents formats\n          const patterns = [\n          // Format: Latitude : 49° 54,83' Longitude : -001° 04,45'\n          /Latitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?\\s*[\\r\\n\\s]*Longitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?/i,\n          // Format alternatif avec espaces différents\n          /Latitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?.*?Longitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?/is,\n          // Format sans symbole degré\n          /Latitude\\s*:\\s*(-?\\d+)\\s*(\\d+)[,\\.](\\d+)['']?\\s*[\\r\\n\\s]*Longitude\\s*:\\s*(-?\\d+)\\s*(\\d+)[,\\.](\\d+)['']?/i];\n          for (const pattern of patterns) {\n            const match = texte.match(pattern);\n            if (match) {\n              const latDeg = parseInt(match[1], 10);\n              const latMin = parseInt(match[2], 10);\n              const latSec = parseInt(match[3], 10);\n              const lngDeg = parseInt(match[4], 10);\n              const lngMin = parseInt(match[5], 10);\n              const lngSec = parseInt(match[6], 10);\n              const lat = convertirEnDecimal(latDeg, latMin, latSec);\n              const lng = convertirEnDecimal(lngDeg, lngMin, lngSec);\n              return {\n                lat,\n                lng\n              };\n            }\n          }\n          return null;\n        };\n\n        // Fonction pour extraire le barycentre (format: 49°56,30N / 1°26,35W)\n        const extraireBarycentre = texte => {\n          const barycentrePattern = /(\\d+)[°o](\\d+)[,\\.](\\d+)([NS])\\s*[\\/\\\\]\\s*(\\d+)[°o](\\d+)[,\\.](\\d+)([EW])/i;\n          const match = texte.match(barycentrePattern);\n          if (match) {\n            const latDeg = parseInt(match[1], 10);\n            const latMin = parseInt(match[2], 10);\n            const latSec = parseInt(match[3], 10);\n            const latCard = match[4].toUpperCase();\n            const lngDeg = parseInt(match[5], 10);\n            const lngMin = parseInt(match[6], 10);\n            const lngSec = parseInt(match[7], 10);\n            const lngCard = match[8].toUpperCase();\n            let lat = convertirEnDecimal(latDeg, latMin, latSec);\n            let lng = convertirEnDecimal(lngDeg, lngMin, lngSec);\n\n            // Appliquer les signes selon les points cardinaux\n            if (latCard === 'S') lat = -lat;\n            if (lngCard === 'W') lng = -lng;\n            return {\n              lat,\n              lng\n            };\n          }\n          return null;\n        };\n\n        // Essayer d'extraire les coordonnées avec différentes méthodes\n        let coords = extrairePositionInitiale(text);\n\n        // Si pas trouvé avec position initiale, essayer avec barycentre\n        if (!coords) {\n          coords = extraireBarycentre(text);\n        }\n\n        // Log pour debug (à supprimer en production)\n        console.log('Texte OCR:', text);\n        console.log('Coordonnées extraites:', coords);\n\n        // Mise à jour de l'état\n        setTesseractCoords(coords ? {\n          lat: Number(coords.lat.toFixed(6)),\n          lng: Number(coords.lng.toFixed(6))\n        } : {\n          lat: null,\n          lng: null\n        });\n\n        // Calcul du centre de l'image\n        let centerLat = (_coords$lat = (_coords = coords) === null || _coords === void 0 ? void 0 : _coords.lat) !== null && _coords$lat !== void 0 ? _coords$lat : 49.87 + decalageY;\n        let centerLng = (_coords$lng = (_coords2 = coords) === null || _coords2 === void 0 ? void 0 : _coords2.lng) !== null && _coords$lng !== void 0 ? _coords$lng : (-2.18 + -0.7) / 2 + decalageX;\n        const widthDeg = 1.48 * etirementX;\n        const heightDeg = widthDeg * imageRatio * etirementY;\n        const south = centerLat - heightDeg / 2;\n        const north = centerLat + heightDeg / 2;\n        const west = centerLng - widthDeg / 2;\n        const east = centerLng + widthDeg / 2;\n        const bounds = [[south, west], [north, east]];\n\n        // Suppression de l'overlay existant\n        if (gifOverlayRef.current) {\n          mapRef.current.removeLayer(gifOverlayRef.current);\n          gifOverlayRef.current = null;\n        }\n\n        // Ajout du nouveau overlay\n        const overlay = L.imageOverlay(pendingGif, bounds, {\n          opacity: 0.7,\n          interactive: false\n        });\n        overlay.addTo(mapRef.current);\n        gifOverlayRef.current = overlay;\n        setPendingGif(null);\n      }).catch(error => {\n        console.error('Erreur OCR:', error);\n        // En cas d'erreur OCR, utiliser les coordonnées par défaut\n        setTesseractCoords({\n          lat: null,\n          lng: null\n        });\n        let centerLat = 49.87 + decalageY;\n        let centerLng = (-2.18 + -0.7) / 2 + decalageX;\n        const widthDeg = 1.48 * etirementX;\n        const heightDeg = widthDeg * (img.height / img.width) * etirementY;\n        const bounds = [[centerLat - heightDeg / 2, centerLng - widthDeg / 2], [centerLat + heightDeg / 2, centerLng + widthDeg / 2]];\n        if (gifOverlayRef.current) {\n          mapRef.current.removeLayer(gifOverlayRef.current);\n          gifOverlayRef.current = null;\n        }\n        const overlay = L.imageOverlay(pendingGif, bounds, {\n          opacity: 0.7,\n          interactive: false\n        });\n        overlay.addTo(mapRef.current);\n        gifOverlayRef.current = overlay;\n        setPendingGif(null);\n      });\n    };\n    img.onerror = () => {\n      console.error('Erreur de chargement de l\\'image');\n      setPendingGif(null);\n    };\n    img.src = pendingGif;\n  };\n\n  // Fonction pour récupérer les titres des rapports\n  const fetchRapportTitres = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\n      const titres = {};\n      response.data.forEach(rapport => {\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\n      });\n      setRapportTitres(titres);\n      console.log('Titres des rapports récupérés:', titres);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\n    }\n  };\n\n  // Initialiser la carte et charger les données\n  useEffect(() => {\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\n    if (!mapRef.current && mapContainerRef.current) {\n      // Utilisation de la couche SHOM Raster Littoral (WMTS)\n      // Documentation : https://data.shom.fr\n      // URL WMTS : https://wxs.ign.fr/essentiels/geoportail/wmts?SERVICE=WMTS&REQUEST=GetCapabilities\n      // Pour la démo, on utilise le proxy du Géoportail (IGN) qui propose la couche SHOM\n      const shomLayer = L.tileLayer('https://wxs.ign.fr/essentiels/geoportail/wmts?layer=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCANLITTORALE&style=normal&tilematrixset=PM&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image/jpeg&TileMatrix={z}&TileCol={x}&TileRow={y}', {\n        attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a> / <a href=\"https://www.ign.fr/\">IGN</a>',\n        maxZoom: 18,\n        tileSize: 256\n      });\n\n      // Couche OpenStreetMap en attendant une clé SHOM/IGN valide\n      const baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; OpenStreetMap contributors',\n        maxZoom: 18\n      });\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\n      baseLayer.addTo(mapRef.current);\n\n      // Contrôles de navigation maritime (optionnel)\n      const couchesNavigation = {\n        \"Carte OpenStreetMap\": baseLayer\n      };\n      L.control.layers(couchesNavigation, {}, {\n        position: 'topright',\n        collapsed: false\n      }).addTo(mapRef.current);\n\n      // Ajouter une échelle\n      L.control.scale({\n        metric: true,\n        imperial: false,\n        position: 'bottomleft'\n      }).addTo(mapRef.current);\n    }\n\n    // Effectuer la récupération des données au montage du composant\n    fetchLieux();\n    fetchRapportTitres();\n    return () => {\n      // Cleanup de la carte lorsque le composant est démonté\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, [API_BASE_URL]);\n\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\n  useEffect(() => {\n    if (mapRef.current && lieux.length > 0) {\n      // Supprimer uniquement les anciens marqueurs\n      markerRefs.current.forEach(marker => {\n        mapRef.current.removeLayer(marker);\n      });\n      markerRefs.current = [];\n\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\n      const coordsMap = {};\n      lieux.forEach(lieu => {\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\n        if (!coordsMap[coordKey]) {\n          coordsMap[coordKey] = [];\n        }\n        coordsMap[coordKey].push(lieu);\n      });\n\n      // Ajouter un marqueur pour chaque coordonnée unique\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\n        const [lat, lng] = coords.split(',');\n\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\n          console.warn('Coordonnées invalides:', coords);\n          return;\n        }\n\n        // Utiliser une icône de navigation maritime conforme à la signalisation\n        const iconeNavigation = L.divIcon({\n          className: 'marqueur-navigation-maritime',\n          html: `<div style=\"\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\n            border: 3px solid #1565c0;\n            border-radius: 50%;\n            width: 26px;\n            height: 26px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\n            font-size: 14px;\n            font-weight: bold;\n            color: #1565c0;\n          \">⚓</div>`,\n          iconSize: [30, 30],\n          iconAnchor: [15, 15]\n        });\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], {\n          icon: iconeNavigation\n        }).addTo(mapRef.current);\n\n        // Créer le contenu du popup avec informations de navigation maritime\n        let popupContent = `\n          <div>\n            <strong>POSITION DE NAVIGATION</strong>\n            <div>\n              <strong>Coordonnées :</strong>\n              <ul>\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\n              </ul>\n            </div>\n            <div>\n              <strong>Points d'intérêt maritime :</strong>\n              <ul>\n                ${lieuxAtCoord.map(lieu => `\n                  <li>\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\n                    ID: ${lieu.id_lieu}<br/>\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\n                      Visualiser le rapport\n                    </button>\n                  </li>\n                `).join('')}\n              </ul>\n            </div>\n          </div>\n        `;\n        marker.bindPopup(popupContent);\n\n        // Ouvrir le popup si c'est le point actuel\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\n          marker.openPopup();\n        }\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\n      });\n    }\n  }, [lieux, rapportTitres, pointActuel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-carte\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"carte-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Carte Marine \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/gif\",\n      onChange: handleGifUpload,\n      style: {\n        margin: '1em 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1em',\n        minHeight: 24\n      },\n      children: tesseractCoords ? tesseractCoords.lat !== null && tesseractCoords.lng !== null ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Coordonn\\xE9es extraites :\\xA0\", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Lat:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 17\n        }, this), \" \", tesseractCoords.lat, \" \\xA0\", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Lon:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 17\n        }, this), \" \", tesseractCoords.lng]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Aucune coordonn\\xE9e d\\xE9tect\\xE9e dans le GIF.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 15\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), pendingGif && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '1em 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"GIF pr\\xEAt \\xE0 \\xEAtre superpos\\xE9.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidateGif,\n        style: {\n          marginLeft: 10\n        },\n        children: \"Valider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n_s(Carte, \"Kd4hpTF1hp+SmqViQJFqT73CjNU=\");\n_c = Carte;\nexport default Carte;\nvar _c;\n$RefreshReg$(_c, \"Carte\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","L","Tesseract","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","Carte","_s","lieux","setLieux","rapportTitres","setRapportTitres","mapRef","mapContainerRef","pointActuel","setPointActuel","markerRefs","gifOverlayRef","pendingGif","setPendingGif","tesseractCoords","setTesseractCoords","API_BASE_URL","process","env","REACT_APP_API_URL","fetchLieux","response","get","data","console","log","error","handleGifUpload","event","file","target","files","name","endsWith","reader","FileReader","onload","e","result","readAsDataURL","decalageX","decalageY","etirementX","etirementY","handleValidateGif","current","img","Image","crossOrigin","canvas","document","createElement","width","height","ctx","getContext","drawImage","recognize","then","text","_coords$lat","_coords","_coords$lng","_coords2","imageRatio","convertirEnDecimal","degres","minutes","secondes","extrairePositionInitiale","texte","patterns","pattern","match","latDeg","parseInt","latMin","latSec","lngDeg","lngMin","lngSec","lat","lng","extraireBarycentre","barycentrePattern","latCard","toUpperCase","lngCard","coords","Number","toFixed","centerLat","centerLng","widthDeg","heightDeg","south","north","west","east","bounds","removeLayer","overlay","imageOverlay","opacity","interactive","addTo","catch","onerror","src","fetchRapportTitres","titres","forEach","rapport","id_rapport","titre","shomLayer","tileLayer","attribution","maxZoom","tileSize","baseLayer","map","setView","couchesNavigation","control","layers","position","collapsed","scale","metric","imperial","remove","length","marker","coordsMap","lieu","coordKey","latitude","longitude","push","Object","entries","lieuxAtCoord","split","isNaN","parseFloat","warn","iconeNavigation","divIcon","className","html","iconSize","iconAnchor","icon","popupContent","details_lieu","id_lieu","join","bindPopup","some","openPopup","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","style","margin","marginBottom","minHeight","onClick","marginLeft","ref","_c","$RefreshReg$"],"sources":["D:/Stage/MarineV3/frontend/src/components/pages/carte.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport '../css/carte.css';\r\nimport Tesseract from 'tesseract.js';\r\n\r\n// Fix Leaflet marker icon issue\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\nconst Carte = () => {\r\n  const [lieux, setLieux] = useState([]); // Liste des lieux à afficher\r\n  const [rapportTitres, setRapportTitres] = useState({}); // Titres des rapports indexés par id_rapport\r\n  const mapRef = useRef(null); // Référence pour la carte\r\n  const mapContainerRef = useRef(null); // Référence pour le container de la carte\r\n  const [pointActuel, setPointActuel] = useState(null);\r\n  const markerRefs = useRef([]); // Ajoutez ceci en haut du composant Carte\r\n  const gifOverlayRef = useRef(null); // Ajoutez ceci pour gérer l'overlay GIF\r\n  const [pendingGif, setPendingGif] = useState(null); // Ajouté pour stocker le GIF temporairement\r\n  const [tesseractCoords, setTesseractCoords] = useState(null); // Ajouté pour afficher les coordonnées extraites\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\n  // Fonction pour récupérer les lieux depuis l'API\r\n  const fetchLieux = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\r\n      setLieux(response.data);\r\n      console.log('Lieux récupérés:', response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des lieux:', error);\r\n    }\r\n  };\r\n\r\n  // Gère la sélection d'un fichier GIF par l'utilisateur\r\n  const handleGifUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file || !file.name.endsWith('.gif')) return;\r\n\r\n    // Utilise FileReader pour lire le fichier GIF en base64\r\n    const reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // Valide et superpose le GIF sur la carte Leaflet\r\n  // Variables pour ajuster la position et l'étirement du GIF\r\n  const decalageX = 0.622; // Décalage horizontal (axe X)\r\n  const decalageY = 0.060; // Décalage vertical (axe Y)\r\n  const etirementX = 0.60; // Étirement horizontal (largeur)\r\n  const etirementY = 0.66; // Étirement vertical (hauteur)\r\n\r\n  const handleValidateGif = () => {\r\n    if (!pendingGif || !mapRef.current) return;\r\n\r\n    const img = new Image();\r\n    img.crossOrigin = 'anonymous';\r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0);\r\n\r\n      Tesseract.recognize(canvas, 'eng').then(({ data: { text } }) => {\r\n        const imageRatio = img.height / img.width;\r\n\r\n        // Fonction utilitaire pour convertir degrés/minutes en décimal\r\n        const convertirEnDecimal = (degres, minutes, secondes = 0) => {\r\n          return degres + (minutes + secondes / 100) / 60;\r\n        };\r\n\r\n        // Fonction pour extraire la position initiale\r\n        const extrairePositionInitiale = (texte) => {\r\n          // Regex plus robuste pour différents formats\r\n          const patterns = [\r\n            // Format: Latitude : 49° 54,83' Longitude : -001° 04,45'\r\n            /Latitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?\\s*[\\r\\n\\s]*Longitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?/i,\r\n            // Format alternatif avec espaces différents\r\n            /Latitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?.*?Longitude\\s*:\\s*(-?\\d+)\\s*[°o]\\s*(\\d+)[,\\.](\\d+)['']?/is,\r\n            // Format sans symbole degré\r\n            /Latitude\\s*:\\s*(-?\\d+)\\s*(\\d+)[,\\.](\\d+)['']?\\s*[\\r\\n\\s]*Longitude\\s*:\\s*(-?\\d+)\\s*(\\d+)[,\\.](\\d+)['']?/i\r\n          ];\r\n\r\n          for (const pattern of patterns) {\r\n            const match = texte.match(pattern);\r\n            if (match) {\r\n              const latDeg = parseInt(match[1], 10);\r\n              const latMin = parseInt(match[2], 10);\r\n              const latSec = parseInt(match[3], 10);\r\n              const lngDeg = parseInt(match[4], 10);\r\n              const lngMin = parseInt(match[5], 10);\r\n              const lngSec = parseInt(match[6], 10);\r\n\r\n              const lat = convertirEnDecimal(latDeg, latMin, latSec);\r\n              const lng = convertirEnDecimal(lngDeg, lngMin, lngSec);\r\n\r\n              return { lat, lng };\r\n            }\r\n          }\r\n          return null;\r\n        };\r\n\r\n        // Fonction pour extraire le barycentre (format: 49°56,30N / 1°26,35W)\r\n        const extraireBarycentre = (texte) => {\r\n          const barycentrePattern = /(\\d+)[°o](\\d+)[,\\.](\\d+)([NS])\\s*[\\/\\\\]\\s*(\\d+)[°o](\\d+)[,\\.](\\d+)([EW])/i;\r\n          const match = texte.match(barycentrePattern);\r\n\r\n          if (match) {\r\n            const latDeg = parseInt(match[1], 10);\r\n            const latMin = parseInt(match[2], 10);\r\n            const latSec = parseInt(match[3], 10);\r\n            const latCard = match[4].toUpperCase();\r\n            const lngDeg = parseInt(match[5], 10);\r\n            const lngMin = parseInt(match[6], 10);\r\n            const lngSec = parseInt(match[7], 10);\r\n            const lngCard = match[8].toUpperCase();\r\n\r\n            let lat = convertirEnDecimal(latDeg, latMin, latSec);\r\n            let lng = convertirEnDecimal(lngDeg, lngMin, lngSec);\r\n\r\n            // Appliquer les signes selon les points cardinaux\r\n            if (latCard === 'S') lat = -lat;\r\n            if (lngCard === 'W') lng = -lng;\r\n\r\n            return { lat, lng };\r\n          }\r\n          return null;\r\n        };\r\n\r\n        // Essayer d'extraire les coordonnées avec différentes méthodes\r\n        let coords = extrairePositionInitiale(text);\r\n\r\n        // Si pas trouvé avec position initiale, essayer avec barycentre\r\n        if (!coords) {\r\n          coords = extraireBarycentre(text);\r\n        }\r\n\r\n        // Log pour debug (à supprimer en production)\r\n        console.log('Texte OCR:', text);\r\n        console.log('Coordonnées extraites:', coords);\r\n\r\n        // Mise à jour de l'état\r\n        setTesseractCoords(\r\n          coords\r\n            ? { lat: Number(coords.lat.toFixed(6)), lng: Number(coords.lng.toFixed(6)) }\r\n            : { lat: null, lng: null }\r\n        );\r\n\r\n        // Calcul du centre de l'image\r\n        let centerLat = coords?.lat ?? 49.87 + decalageY;\r\n        let centerLng = coords?.lng ?? ((-2.18 + -0.7) / 2 + decalageX);\r\n\r\n        const widthDeg = 1.48 * etirementX;\r\n        const heightDeg = widthDeg * imageRatio * etirementY;\r\n\r\n        const south = centerLat - heightDeg / 2;\r\n        const north = centerLat + heightDeg / 2;\r\n        const west = centerLng - widthDeg / 2;\r\n        const east = centerLng + widthDeg / 2;\r\n\r\n        const bounds = [\r\n          [south, west],\r\n          [north, east]\r\n        ];\r\n\r\n        // Suppression de l'overlay existant\r\n        if (gifOverlayRef.current) {\r\n          mapRef.current.removeLayer(gifOverlayRef.current);\r\n          gifOverlayRef.current = null;\r\n        }\r\n\r\n        // Ajout du nouveau overlay\r\n        const overlay = L.imageOverlay(pendingGif, bounds, {\r\n          opacity: 0.7,\r\n          interactive: false\r\n        });\r\n        overlay.addTo(mapRef.current);\r\n        gifOverlayRef.current = overlay;\r\n\r\n        setPendingGif(null);\r\n      }).catch(error => {\r\n        console.error('Erreur OCR:', error);\r\n        // En cas d'erreur OCR, utiliser les coordonnées par défaut\r\n        setTesseractCoords({ lat: null, lng: null });\r\n\r\n        let centerLat = 49.87 + decalageY;\r\n        let centerLng = ((-2.18 + -0.7) / 2 + decalageX);\r\n\r\n        const widthDeg = 1.48 * etirementX;\r\n        const heightDeg = widthDeg * (img.height / img.width) * etirementY;\r\n\r\n        const bounds = [\r\n          [centerLat - heightDeg / 2, centerLng - widthDeg / 2],\r\n          [centerLat + heightDeg / 2, centerLng + widthDeg / 2]\r\n        ];\r\n\r\n        if (gifOverlayRef.current) {\r\n          mapRef.current.removeLayer(gifOverlayRef.current);\r\n          gifOverlayRef.current = null;\r\n        }\r\n\r\n        const overlay = L.imageOverlay(pendingGif, bounds, {\r\n          opacity: 0.7,\r\n          interactive: false\r\n        });\r\n        overlay.addTo(mapRef.current);\r\n        gifOverlayRef.current = overlay;\r\n\r\n        setPendingGif(null);\r\n      });\r\n    };\r\n\r\n    img.onerror = () => {\r\n      console.error('Erreur de chargement de l\\'image');\r\n      setPendingGif(null);\r\n    };\r\n\r\n    img.src = pendingGif;\r\n  };\r\n\r\n\r\n\r\n  // Fonction pour récupérer les titres des rapports\r\n  const fetchRapportTitres = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\r\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\r\n      const titres = {};\r\n      response.data.forEach(rapport => {\r\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\r\n      });\r\n      setRapportTitres(titres);\r\n      console.log('Titres des rapports récupérés:', titres);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\r\n    }\r\n  };\r\n\r\n  // Initialiser la carte et charger les données\r\n  useEffect(() => {\r\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\r\n    if (!mapRef.current && mapContainerRef.current) {\r\n      // Utilisation de la couche SHOM Raster Littoral (WMTS)\r\n      // Documentation : https://data.shom.fr\r\n      // URL WMTS : https://wxs.ign.fr/essentiels/geoportail/wmts?SERVICE=WMTS&REQUEST=GetCapabilities\r\n      // Pour la démo, on utilise le proxy du Géoportail (IGN) qui propose la couche SHOM\r\n      const shomLayer = L.tileLayer(\r\n        'https://wxs.ign.fr/essentiels/geoportail/wmts?layer=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCANLITTORALE&style=normal&tilematrixset=PM&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image/jpeg&TileMatrix={z}&TileCol={x}&TileRow={y}',\r\n        {\r\n          attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a> / <a href=\"https://www.ign.fr/\">IGN</a>',\r\n          maxZoom: 18,\r\n          tileSize: 256,\r\n        }\r\n      );\r\n\r\n      // Couche OpenStreetMap en attendant une clé SHOM/IGN valide\r\n      const baseLayer = L.tileLayer(\r\n        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n        {\r\n          attribution: '&copy; OpenStreetMap contributors',\r\n          maxZoom: 18,\r\n        }\r\n      );\r\n\r\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\r\n      baseLayer.addTo(mapRef.current);\r\n\r\n      // Contrôles de navigation maritime (optionnel)\r\n      const couchesNavigation = {\r\n        \"Carte OpenStreetMap\": baseLayer\r\n      };\r\n\r\n      L.control.layers(couchesNavigation, {}, {\r\n        position: 'topright',\r\n        collapsed: false\r\n      }).addTo(mapRef.current);\r\n\r\n      // Ajouter une échelle\r\n      L.control.scale({\r\n        metric: true,\r\n        imperial: false,\r\n        position: 'bottomleft'\r\n      }).addTo(mapRef.current);\r\n    }\r\n\r\n    // Effectuer la récupération des données au montage du composant\r\n    fetchLieux();\r\n    fetchRapportTitres();\r\n\r\n    return () => {\r\n      // Cleanup de la carte lorsque le composant est démonté\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n        mapRef.current = null;\r\n      }\r\n    };\r\n  }, [API_BASE_URL]);\r\n\r\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\r\n  useEffect(() => {\r\n    if (mapRef.current && lieux.length > 0) {\r\n      // Supprimer uniquement les anciens marqueurs\r\n      markerRefs.current.forEach(marker => {\r\n        mapRef.current.removeLayer(marker);\r\n      });\r\n      markerRefs.current = [];\r\n\r\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\r\n      const coordsMap = {};\r\n\r\n      lieux.forEach(lieu => {\r\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\r\n        if (!coordsMap[coordKey]) {\r\n          coordsMap[coordKey] = [];\r\n        }\r\n        coordsMap[coordKey].push(lieu);\r\n      });\r\n\r\n      // Ajouter un marqueur pour chaque coordonnée unique\r\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\r\n        const [lat, lng] = coords.split(',');\r\n\r\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\r\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\r\n          console.warn('Coordonnées invalides:', coords);\r\n          return;\r\n        }\r\n\r\n        // Utiliser une icône de navigation maritime conforme à la signalisation\r\n        const iconeNavigation = L.divIcon({\r\n          className: 'marqueur-navigation-maritime',\r\n          html: `<div style=\"\r\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\r\n            border: 3px solid #1565c0;\r\n            border-radius: 50%;\r\n            width: 26px;\r\n            height: 26px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            color: #1565c0;\r\n          \">⚓</div>`,\r\n          iconSize: [30, 30],\r\n          iconAnchor: [15, 15]\r\n        });\r\n\r\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], { icon: iconeNavigation }).addTo(mapRef.current);\r\n\r\n        // Créer le contenu du popup avec informations de navigation maritime\r\n        let popupContent = `\r\n          <div>\r\n            <strong>POSITION DE NAVIGATION</strong>\r\n            <div>\r\n              <strong>Coordonnées :</strong>\r\n              <ul>\r\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\r\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <strong>Points d'intérêt maritime :</strong>\r\n              <ul>\r\n                ${lieuxAtCoord.map(lieu => `\r\n                  <li>\r\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\r\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\r\n                    ID: ${lieu.id_lieu}<br/>\r\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\r\n                      Visualiser le rapport\r\n                    </button>\r\n                  </li>\r\n                `).join('')}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        marker.bindPopup(popupContent);\r\n\r\n        // Ouvrir le popup si c'est le point actuel\r\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\r\n          marker.openPopup();\r\n        }\r\n\r\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\r\n      });\r\n    }\r\n  }, [lieux, rapportTitres, pointActuel]);\r\n\r\n  return (\r\n    <div className=\"page-carte\">\r\n      <div className=\"carte-header\">\r\n        <h2>Carte Marine </h2>\r\n      </div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/gif\"\r\n        onChange={handleGifUpload}\r\n        style={{ margin: '1em 0' }}\r\n      />\r\n\r\n      {/* Champ pour afficher les coordonnées extraites */}\r\n      <div style={{ marginBottom: '1em', minHeight: 24 }}>\r\n        {tesseractCoords\r\n          ? (tesseractCoords.lat !== null && tesseractCoords.lng !== null\r\n            ? (\r\n              <span>\r\n                Coordonnées extraites :&nbsp;\r\n                <b>Lat:</b> {tesseractCoords.lat} &nbsp;\r\n                <b>Lon:</b> {tesseractCoords.lng}\r\n              </span>\r\n            )\r\n            : <span>Aucune coordonnée détectée dans le GIF.</span>\r\n          )\r\n          : null}\r\n      </div>\r\n\r\n      {pendingGif && (\r\n        <div style={{ margin: '1em 0' }}>\r\n          <span>GIF prêt à être superposé.</span>\r\n          <button onClick={handleValidateGif} style={{ marginLeft: 10 }}>\r\n            Valider\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div\r\n        ref={mapContainerRef}\r\n        className=\"map-container\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Carte;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}