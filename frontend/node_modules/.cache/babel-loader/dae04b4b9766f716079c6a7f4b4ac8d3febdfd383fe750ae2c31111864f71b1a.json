{"ast":null,"code":"var _jsxFileName = \"D:\\\\Stage\\\\MarineV3\\\\frontend\\\\src\\\\components\\\\pages\\\\carte.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport '../css/carte.css';\n\n// Fix Leaflet marker icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst Carte = () => {\n  _s();\n  const [lieux, setLieux] = useState([]); // Liste des lieux à afficher\n  const [rapportTitres, setRapportTitres] = useState({}); // Titres des rapports indexés par id_rapport\n  const mapRef = useRef(null); // Référence pour la carte\n  const mapContainerRef = useRef(null); // Référence pour le container de la carte\n  const [pointActuel, setPointActuel] = useState(null);\n  const markerRefs = useRef([]); // Ajoutez ceci en haut du composant Carte\n  const gifOverlayRef = useRef(null); // Ajoutez ceci pour gérer l'overlay GIF\n  const [pendingGif, setPendingGif] = useState(null); // Ajouté pour stocker le GIF temporairement\n\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\n\n  // Fonction pour récupérer les lieux depuis l'API\n  const fetchLieux = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\n      setLieux(response.data);\n      console.log('Lieux récupérés:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des lieux:', error);\n    }\n  };\n\n  // Gère la sélection d'un fichier GIF par l'utilisateur\n  const handleGifUpload = event => {\n    const file = event.target.files[0];\n    if (!file || !file.name.endsWith('.gif')) return;\n\n    // Utilise FileReader pour lire le fichier GIF en base64\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Valide et superpose le GIF sur la carte Leaflet\n  const handleValidateGif = () => {\n    if (!pendingGif || !mapRef.current) return;\n    const img = new Image();\n    img.onload = () => {\n      const imageRatio = img.height / img.width;\n\n      // Décale plus à droite (augmente west et east)\n      const west = -1.5; // plus à l'est qu'avant\n      const east = 0.2; // encore plus à l'est\n      const widthDeg = east - west;\n\n      // Hauteur ajustée avec un facteur de correction (encore plus haute)\n      const correctionFactor = 1.1; // augmente la hauteur\n      const heightDeg = widthDeg * imageRatio * correctionFactor;\n\n      // Centre plus bas pour abaisser l’image\n      const centerLat = 49.89; // inchangé\n\n      const south = centerLat - heightDeg / 2;\n      const north = centerLat + heightDeg / 2;\n      const bounds = [[south, west], [north, east]];\n\n      // Supprime l’ancien overlay s’il existe\n      if (gifOverlayRef.current) {\n        mapRef.current.removeLayer(gifOverlayRef.current);\n        gifOverlayRef.current = null;\n      }\n      const overlay = L.imageOverlay(pendingGif, bounds, {\n        opacity: 0.7,\n        interactive: false\n      });\n      overlay.addTo(mapRef.current);\n      gifOverlayRef.current = overlay;\n      setPendingGif(null);\n    };\n    img.src = pendingGif;\n  };\n\n  // Fonction pour récupérer les titres des rapports\n  const fetchRapportTitres = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\n      const titres = {};\n      response.data.forEach(rapport => {\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\n      });\n      setRapportTitres(titres);\n      console.log('Titres des rapports récupérés:', titres);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\n    }\n  };\n\n  // Initialiser la carte et charger les données\n  useEffect(() => {\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\n    if (!mapRef.current && mapContainerRef.current) {\n      // Utilisation de la couche SHOM Raster Littoral (WMTS)\n      // Documentation : https://data.shom.fr\n      // URL WMTS : https://wxs.ign.fr/essentiels/geoportail/wmts?SERVICE=WMTS&REQUEST=GetCapabilities\n      // Pour la démo, on utilise le proxy du Géoportail (IGN) qui propose la couche SHOM\n      const shomLayer = L.tileLayer('https://wxs.ign.fr/essentiels/geoportail/wmts?layer=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCANLITTORALE&style=normal&tilematrixset=PM&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image/jpeg&TileMatrix={z}&TileCol={x}&TileRow={y}', {\n        attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a> / <a href=\"https://www.ign.fr/\">IGN</a>',\n        maxZoom: 18,\n        tileSize: 256\n      });\n\n      // Couche OpenStreetMap en attendant une clé SHOM/IGN valide\n      const baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; OpenStreetMap contributors',\n        maxZoom: 18\n      });\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\n      baseLayer.addTo(mapRef.current);\n\n      // Contrôles de navigation maritime (optionnel)\n      const couchesNavigation = {\n        \"Carte OpenStreetMap\": baseLayer\n      };\n      L.control.layers(couchesNavigation, {}, {\n        position: 'topright',\n        collapsed: false\n      }).addTo(mapRef.current);\n\n      // Ajouter une échelle\n      L.control.scale({\n        metric: true,\n        imperial: false,\n        position: 'bottomleft'\n      }).addTo(mapRef.current);\n    }\n\n    // Effectuer la récupération des données au montage du composant\n    fetchLieux();\n    fetchRapportTitres();\n    return () => {\n      // Cleanup de la carte lorsque le composant est démonté\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, [API_BASE_URL]);\n\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\n  useEffect(() => {\n    if (mapRef.current && lieux.length > 0) {\n      // Supprimer uniquement les anciens marqueurs\n      markerRefs.current.forEach(marker => {\n        mapRef.current.removeLayer(marker);\n      });\n      markerRefs.current = [];\n\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\n      const coordsMap = {};\n      lieux.forEach(lieu => {\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\n        if (!coordsMap[coordKey]) {\n          coordsMap[coordKey] = [];\n        }\n        coordsMap[coordKey].push(lieu);\n      });\n\n      // Ajouter un marqueur pour chaque coordonnée unique\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\n        const [lat, lng] = coords.split(',');\n\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\n          console.warn('Coordonnées invalides:', coords);\n          return;\n        }\n\n        // Utiliser une icône de navigation maritime conforme à la signalisation\n        const iconeNavigation = L.divIcon({\n          className: 'marqueur-navigation-maritime',\n          html: `<div style=\"\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\n            border: 3px solid #1565c0;\n            border-radius: 50%;\n            width: 26px;\n            height: 26px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\n            font-size: 14px;\n            font-weight: bold;\n            color: #1565c0;\n          \">⚓</div>`,\n          iconSize: [30, 30],\n          iconAnchor: [15, 15]\n        });\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], {\n          icon: iconeNavigation\n        }).addTo(mapRef.current);\n\n        // Créer le contenu du popup avec informations de navigation maritime\n        let popupContent = `\n          <div>\n            <strong>POSITION DE NAVIGATION</strong>\n            <div>\n              <strong>Coordonnées :</strong>\n              <ul>\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\n              </ul>\n            </div>\n            <div>\n              <strong>Points d'intérêt maritime :</strong>\n              <ul>\n                ${lieuxAtCoord.map(lieu => `\n                  <li>\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\n                    ID: ${lieu.id_lieu}<br/>\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\n                      Visualiser le rapport\n                    </button>\n                  </li>\n                `).join('')}\n              </ul>\n            </div>\n          </div>\n        `;\n        marker.bindPopup(popupContent);\n\n        // Ouvrir le popup si c'est le point actuel\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\n          marker.openPopup();\n        }\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\n      });\n    }\n  }, [lieux, rapportTitres, pointActuel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-carte\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"carte-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Carte Marine \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/gif\",\n      onChange: handleGifUpload,\n      style: {\n        margin: '1em 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), pendingGif && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '1em 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"GIF pr\\xEAt \\xE0 \\xEAtre superpos\\xE9.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidateGif,\n        style: {\n          marginLeft: 10\n        },\n        children: \"Valider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n};\n_s(Carte, \"0lCQM7a/kj1mdDqel+rK81fwELA=\");\n_c = Carte;\nexport default Carte;\nvar _c;\n$RefreshReg$(_c, \"Carte\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","Carte","_s","lieux","setLieux","rapportTitres","setRapportTitres","mapRef","mapContainerRef","pointActuel","setPointActuel","markerRefs","gifOverlayRef","pendingGif","setPendingGif","API_BASE_URL","process","env","REACT_APP_API_URL","fetchLieux","response","get","data","console","log","error","handleGifUpload","event","file","target","files","name","endsWith","reader","FileReader","onload","e","result","readAsDataURL","handleValidateGif","current","img","Image","imageRatio","height","width","west","east","widthDeg","correctionFactor","heightDeg","centerLat","south","north","bounds","removeLayer","overlay","imageOverlay","opacity","interactive","addTo","src","fetchRapportTitres","titres","forEach","rapport","id_rapport","titre","shomLayer","tileLayer","attribution","maxZoom","tileSize","baseLayer","map","setView","couchesNavigation","control","layers","position","collapsed","scale","metric","imperial","remove","length","marker","coordsMap","lieu","coordKey","latitude","longitude","push","Object","entries","coords","lieuxAtCoord","lat","lng","split","isNaN","parseFloat","warn","iconeNavigation","divIcon","className","html","iconSize","iconAnchor","icon","popupContent","toFixed","details_lieu","id_lieu","join","bindPopup","some","openPopup","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","style","margin","onClick","marginLeft","ref","_c","$RefreshReg$"],"sources":["D:/Stage/MarineV3/frontend/src/components/pages/carte.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport '../css/carte.css';\r\n\r\n// Fix Leaflet marker icon issue\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\nconst Carte = () => {\r\n  const [lieux, setLieux] = useState([]); // Liste des lieux à afficher\r\n  const [rapportTitres, setRapportTitres] = useState({}); // Titres des rapports indexés par id_rapport\r\n  const mapRef = useRef(null); // Référence pour la carte\r\n  const mapContainerRef = useRef(null); // Référence pour le container de la carte\r\n  const [pointActuel, setPointActuel] = useState(null);\r\n  const markerRefs = useRef([]); // Ajoutez ceci en haut du composant Carte\r\n  const gifOverlayRef = useRef(null); // Ajoutez ceci pour gérer l'overlay GIF\r\n  const [pendingGif, setPendingGif] = useState(null); // Ajouté pour stocker le GIF temporairement\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\n  // Fonction pour récupérer les lieux depuis l'API\r\n  const fetchLieux = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/lieu`);\r\n      setLieux(response.data);\r\n      console.log('Lieux récupérés:', response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des lieux:', error);\r\n    }\r\n  };\r\n\r\n  // Gère la sélection d'un fichier GIF par l'utilisateur\r\n  const handleGifUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file || !file.name.endsWith('.gif')) return;\r\n\r\n    // Utilise FileReader pour lire le fichier GIF en base64\r\n    const reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      setPendingGif(e.target.result); // Stocke le GIF en attente de validation\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // Valide et superpose le GIF sur la carte Leaflet\r\n  const handleValidateGif = () => {\r\n    if (!pendingGif || !mapRef.current) return;\r\n\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      const imageRatio = img.height / img.width;\r\n\r\n      // Décale plus à droite (augmente west et east)\r\n      const west = -1.5; // plus à l'est qu'avant\r\n      const east = 0.2;  // encore plus à l'est\r\n      const widthDeg = east - west;\r\n\r\n      // Hauteur ajustée avec un facteur de correction (encore plus haute)\r\n      const correctionFactor = 1.1; // augmente la hauteur\r\n      const heightDeg = widthDeg * imageRatio * correctionFactor;\r\n\r\n      // Centre plus bas pour abaisser l’image\r\n      const centerLat = 49.89; // inchangé\r\n\r\n      const south = centerLat - heightDeg / 2;\r\n      const north = centerLat + heightDeg / 2;\r\n\r\n      const bounds = [\r\n        [south, west],\r\n        [north, east]\r\n      ];\r\n\r\n      // Supprime l’ancien overlay s’il existe\r\n      if (gifOverlayRef.current) {\r\n        mapRef.current.removeLayer(gifOverlayRef.current);\r\n        gifOverlayRef.current = null;\r\n      }\r\n\r\n      const overlay = L.imageOverlay(pendingGif, bounds, {\r\n        opacity: 0.7,\r\n        interactive: false\r\n      });\r\n      overlay.addTo(mapRef.current);\r\n      gifOverlayRef.current = overlay;\r\n\r\n      setPendingGif(null);\r\n    };\r\n\r\n    img.src = pendingGif;\r\n  };\r\n\r\n\r\n\r\n  // Fonction pour récupérer les titres des rapports\r\n  const fetchRapportTitres = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/rapports`);\r\n      // Créer un objet avec les id_rapport comme clés et les titres comme valeurs\r\n      const titres = {};\r\n      response.data.forEach(rapport => {\r\n        titres[rapport.id_rapport] = rapport.titre || 'Rapport sans titre';\r\n      });\r\n      setRapportTitres(titres);\r\n      console.log('Titres des rapports récupérés:', titres);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des titres de rapports:', error);\r\n    }\r\n  };\r\n\r\n  // Initialiser la carte et charger les données\r\n  useEffect(() => {\r\n    // Initialiser la carte uniquement si le container existe et que la carte n'est pas encore initialisée\r\n    if (!mapRef.current && mapContainerRef.current) {\r\n      // Utilisation de la couche SHOM Raster Littoral (WMTS)\r\n      // Documentation : https://data.shom.fr\r\n      // URL WMTS : https://wxs.ign.fr/essentiels/geoportail/wmts?SERVICE=WMTS&REQUEST=GetCapabilities\r\n      // Pour la démo, on utilise le proxy du Géoportail (IGN) qui propose la couche SHOM\r\n      const shomLayer = L.tileLayer(\r\n        'https://wxs.ign.fr/essentiels/geoportail/wmts?layer=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCANLITTORALE&style=normal&tilematrixset=PM&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image/jpeg&TileMatrix={z}&TileCol={x}&TileRow={y}',\r\n        {\r\n          attribution: '&copy; <a href=\"https://www.shom.fr/\">SHOM</a> / <a href=\"https://www.ign.fr/\">IGN</a>',\r\n          maxZoom: 18,\r\n          tileSize: 256,\r\n        }\r\n      );\r\n\r\n      // Couche OpenStreetMap en attendant une clé SHOM/IGN valide\r\n      const baseLayer = L.tileLayer(\r\n        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n        {\r\n          attribution: '&copy; OpenStreetMap contributors',\r\n          maxZoom: 18,\r\n        }\r\n      );\r\n\r\n      mapRef.current = L.map(mapContainerRef.current).setView([48.2, -3.5], 8); // Bretagne\r\n      baseLayer.addTo(mapRef.current);\r\n\r\n      // Contrôles de navigation maritime (optionnel)\r\n      const couchesNavigation = {\r\n        \"Carte OpenStreetMap\": baseLayer\r\n      };\r\n\r\n      L.control.layers(couchesNavigation, {}, {\r\n        position: 'topright',\r\n        collapsed: false\r\n      }).addTo(mapRef.current);\r\n\r\n      // Ajouter une échelle\r\n      L.control.scale({\r\n        metric: true,\r\n        imperial: false,\r\n        position: 'bottomleft'\r\n      }).addTo(mapRef.current);\r\n    }\r\n\r\n    // Effectuer la récupération des données au montage du composant\r\n    fetchLieux();\r\n    fetchRapportTitres();\r\n\r\n    return () => {\r\n      // Cleanup de la carte lorsque le composant est démonté\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n        mapRef.current = null;\r\n      }\r\n    };\r\n  }, [API_BASE_URL]);\r\n\r\n  // Ajouter les marqueurs une fois que les lieux et les titres des rapports sont disponibles\r\n  useEffect(() => {\r\n    if (mapRef.current && lieux.length > 0) {\r\n      // Supprimer uniquement les anciens marqueurs\r\n      markerRefs.current.forEach(marker => {\r\n        mapRef.current.removeLayer(marker);\r\n      });\r\n      markerRefs.current = [];\r\n\r\n      // Créer un dictionnaire pour regrouper les lieux par coordonnées\r\n      const coordsMap = {};\r\n\r\n      lieux.forEach(lieu => {\r\n        const coordKey = `${lieu.latitude},${lieu.longitude}`;\r\n        if (!coordsMap[coordKey]) {\r\n          coordsMap[coordKey] = [];\r\n        }\r\n        coordsMap[coordKey].push(lieu);\r\n      });\r\n\r\n      // Ajouter un marqueur pour chaque coordonnée unique\r\n      Object.entries(coordsMap).forEach(([coords, lieuxAtCoord]) => {\r\n        const [lat, lng] = coords.split(',');\r\n\r\n        // Ne pas ajouter de marqueur si les coordonnées sont invalides\r\n        if (isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {\r\n          console.warn('Coordonnées invalides:', coords);\r\n          return;\r\n        }\r\n\r\n        // Utiliser une icône de navigation maritime conforme à la signalisation\r\n        const iconeNavigation = L.divIcon({\r\n          className: 'marqueur-navigation-maritime',\r\n          html: `<div style=\"\r\n            background: linear-gradient(45deg, #ffffff, #e3f2fd);\r\n            border: 3px solid #1565c0;\r\n            border-radius: 50%;\r\n            width: 26px;\r\n            height: 26px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            box-shadow: 0 3px 8px rgba(21,101,192,0.4);\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            color: #1565c0;\r\n          \">⚓</div>`,\r\n          iconSize: [30, 30],\r\n          iconAnchor: [15, 15]\r\n        });\r\n\r\n        const marker = L.marker([parseFloat(lat), parseFloat(lng)], { icon: iconeNavigation }).addTo(mapRef.current);\r\n\r\n        // Créer le contenu du popup avec informations de navigation maritime\r\n        let popupContent = `\r\n          <div>\r\n            <strong>POSITION DE NAVIGATION</strong>\r\n            <div>\r\n              <strong>Coordonnées :</strong>\r\n              <ul>\r\n                <li>Lat: ${parseFloat(lat).toFixed(4)}°</li>\r\n                <li>Lon: ${parseFloat(lng).toFixed(4)}°</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <strong>Points d'intérêt maritime :</strong>\r\n              <ul>\r\n                ${lieuxAtCoord.map(lieu => `\r\n                  <li>\r\n                    ${lieu.details_lieu || 'Position non définie'}<br/>\r\n                    Rapport: ${rapportTitres[lieu.id_rapport] || `Réf. ${lieu.id_rapport}`}<br/>\r\n                    ID: ${lieu.id_lieu}<br/>\r\n                    <button onclick=\"window.location.href='/rapport/${lieu.id_rapport}'\" style=\"margin-top:4px;padding:2px 8px;font-size:13px;cursor:pointer;\">\r\n                      Visualiser le rapport\r\n                    </button>\r\n                  </li>\r\n                `).join('')}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        marker.bindPopup(popupContent);\r\n\r\n        // Ouvrir le popup si c'est le point actuel\r\n        if (pointActuel && lieuxAtCoord.some(lieu => lieu.id_lieu === pointActuel.id_lieu)) {\r\n          marker.openPopup();\r\n        }\r\n\r\n        markerRefs.current.push(marker); // Stocker le marqueur pour le nettoyage futur\r\n      });\r\n    }\r\n  }, [lieux, rapportTitres, pointActuel]);\r\n\r\n  return (\r\n    <div className=\"page-carte\">\r\n      <div className=\"carte-header\">\r\n        <h2>Carte Marine </h2>\r\n      </div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/gif\"\r\n        onChange={handleGifUpload}\r\n        style={{ margin: '1em 0' }}\r\n      />\r\n\r\n      {pendingGif && (\r\n        <div style={{ margin: '1em 0' }}>\r\n          <span>GIF prêt à être superposé.</span>\r\n          <button onClick={handleValidateGif} style={{ marginLeft: 10 }}>\r\n            Valider\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div\r\n        ref={mapContainerRef}\r\n        className=\"map-container\"\r\n      />\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Carte;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}